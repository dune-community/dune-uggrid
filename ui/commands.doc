

/****************************************************************************/
/** \page   exitug  exitug - Exits UG

   This command exits the current application and closes the shell.

\section Syntax
   'exitug'
   
 \section Keywords
   terminate, bye, tschuess
*/
/****************************************************************************/

/****************************************************************************/
/** \page mute mute - Set mutelevel

   This command sets a mutelevel. 
   The default value is 0 and all skript lines will be printed on the shell.
   This will be suppressed by mutelevel -1.
   Smaller muteleveles should reduce the output further.
   A mutelevel of -1000 supresses all output to shell.

\section Syntax
   'mute \<value>'
  <li>  \<value> - integer which gives the mutelevel

   REMARK:
   Formally, this is not an ug command, 'mute' is checked in 
   'InterpretString'.
   
 \section Keywords
   verbose, quiet, silent
*/
/****************************************************************************/

/****************************************************************************/
/** \page   ls ls - Lists the content of an environment directory.

 \section Description
   This command lists the content of an environment directory.

   'ls [\<path\>]'

   <ul>
     <li>  no option - lists the content of the current directory. </li>
     <li>  \<path\>    - contains the relative or absolute path in UNIX-style </li>
   </ul>
   
 \section Keywords
   environment, directory, list

   Implemented in \ref ListEnvCommand().
*/
/****************************************************************************/

/****************************************************************************/
/** \page cd  cd - Change the current environment directory.

 \section Description
   This command changes the current environment directory.
   It uses the function 'ChangeEnvDir'.

\section Syntax
   'cd [\<path>]'

  <li> no~option - cd to root (cd /)
  <li> \<path>	 - \<path> contains the relative or absolute path in UNIX-style
   
 \section Keywords
   environment, directory, working
*/
/****************************************************************************/

/****************************************************************************/
/** \page   pwd pwd - Print the current environment directory

 \section Description
   This command print the current environment directory to the shell.
   It uses the function 'CangeEnvDir'.

\section Syntax
   'pwd'
   
 \section Keywords
   environment, directory, working
*/
/****************************************************************************/

/****************************************************************************/
/** \page   envinfo envinfo - Print total size and used memory

 \section Description
   This command prints total size and used memory of the emvironment to shell.

\section Syntax
   'envinfo'
   
 \section Keywords
   environment, size, heap, memory
*/
/****************************************************************************/

/****************************************************************************/
/** \page   set set - Set (or print) a string variable struct	

 \section Description
   This command sets (or prints) a string variable struct.
   If it is not existing it is also created.
   It sets or prints the contents of a struct or struct directory.

\section Syntax
   'set {\<struct> \<value>} | {[\<structdir> | \<struct>] [$r]}'

  <li> \<struct>~\<value>   			- assign \<value> (just a string of arbitrary length) to \<struct>
  <li> [\<structdir>|\<struct>]~[$r]  - display contents of \<struct> or \<structdir> 
.n                                (default: current struct dir)
  <li> $r        					- specifies the directory, its contents is listed recursively
   
 \section Keywords
   variable, create, set, assign, value, struct, show, display, print

  \sa structpath
*/
/****************************************************************************/

/****************************************************************************/
/** \page   dv dv - Delete an existing string variable

 \section Description
   This command deletes an existing string variable from the environment.

\section Syntax
   dv \<variable name>

  <li> \<variable name>    - \<variable name> consists of a complete path related to the
                        current struct dir or the structure root directory in the environment
   
 \section Keywords
   variable, remove, delete

   SEE ALSO:
   def, structpath, dv
*/
/****************************************************************************/

/****************************************************************************/
/** \page   ms ms  - Create a structure

 \section Description
   This commands creates a new string variable struct.
   It calls the function 'MakeStruct'.

\section Syntax
   'ms \<structdir>'

  <li> \<structdir>     - the \<structdir> consists of a complete path related to the
                     current struct dir or the string variable root in the environment
   
 \section Keywords
   variable, create, struct

   SEE ALSO:
   'structpath'
*/
/****************************************************************************/

/****************************************************************************/
/** \page cs  cs  - Change to a struct directory
 *
 \section Description
   This commands changes to a struct directory.
   It calls the function 'ChangeStructDir'.

\section Syntax
   'cs \<structdir>'

  <li> \<structdir>   - the \<structdir> consists of a complete path related to the
                   current struct dir or the string variable root in the environment
   
 \section Keywords
   variable, struct, change
*/
/****************************************************************************/

/****************************************************************************/
/** \page   pws  pws  - Print the current struct path

 \section Description
   This commands calls the function 'GetStructPathName' and 
   prints the result to the shell.

\section Syntax
   'pws'
   
 \section Keywords
   variable, print, display, show, struct
*/
/****************************************************************************/

/****************************************************************************/
/** \page   ds ds  - Deletes a struct 

 \section Description
   This commands calls the function 'DeleteStruct' to remove a struct.

\section Syntax
   'ds \<structdir>'

  <li> \<structdir>   - the \<structdir> consists of a complete path related to the
.n                 current struct dir or the string variable root in the environment
   
 \section Keywords
   variable, delete, remove, struct
   
   SEE ALSO:
   dv, structpath

*/
/****************************************************************************/

	
/****************************************************************************/
/** \page protocol protocol - Print strings to the protocol file

  \section Description

   This command prints strings to protocol file.
   It writes formatted output to the open protocol file.

\section Syntax
   'protocol {$i[ ]\<verbatim text> | $n[ ]\<verbatim text> | $t[ ]\<verbatim text> | $f}*'

  <li>  $%i   - append \<verbatim text> to protocol file
  <li>  $%n   - write a line feed and append \<verbatim text> to protocol file
  <li>  $%t   - write a tab and append \<verbatim text> to protocol file
.n          NOTE: the first space (if there) following the option character is skipped
  <li>  $%f   - flush the file buffer

  \section Example
\verbatim
x = exp(1);
protoOn exp.proto;
protocol $%i the value of exp(1) is $%t \@x;
protocol $%n you can use $s in protocol;
protoOff 
\endverbatim

Then, the file 'exp.proto' will consist of the string
\verbatim
"the value of exp(1) is\t2.7182818\nyou can use $s in protocol"
\endverbatim
   
   \section Keywords
   protocol, file, output, format
  
   \sa protoOn, protoOff
*/
/****************************************************************************/

/****************************************************************************/
/** \page   protoOn protoOn - Open protocol file where specially formatted output is saved
  
 \section Description
   This command opens protocol file where specially formatted output is saved.

\section Syntax
   'protoOn \<filename> [$r[!] | $a]'

  <li>  \<filename>  - name of the protocol file      
  <li>   $r!        - if a file named \<filename> exist already, rename it to \<filename>.saved
.n                break if the renaming fails
  <li>  $r          - like above but proceed even if renaming fails
  <li>  $a          - append to existing file named \<filename>
   
 \section Keywords
   protocol, file, open, output, format

   SEE ALSO:
   'protoOff', 'protocol'
*/
/****************************************************************************/

/****************************************************************************/
/** \page   protoOff protoOff - close protocol file 
  
 \section Description
   This command closes the protocol file.

\section Syntax
   'protoOff'
   
 \section Keywords
   protocol, file, close, output, format

   SEE ALSO:
   'protoOn', 'protocol'
*/
/****************************************************************************/

/****************************************************************************/
/** \page logon logon - Open log file where all shell output is saved
  
 \section Description
   This command opens a log file where all shell output is saved.

\section Syntax
   'logon \<logfilename> [$p] [$e] [$a] [$f] [$r [0|1]]'

  <li>  \<filename>  - name of logfile
  <li>  $p			- write log to open protocol file
  <li>  $e			- extend filename with numbers of processors (parallel only)
  <li>  $a			- extend filename with processor id (parallel only)
  <li>  $f			- force (close open logfile iff)
  <li>  $r~[0|1]	- 0: replace (default), 1: rename existing log file (using modification date)
   
 \section Keywords
   protocol, file, open, output

   SEE ALSO:
   'logoff'    
*/
/****************************************************************************/

/****************************************************************************/
/** \page logoff logoff - Close logfile
  
 \section Description
   This command closes the logfile.

\section Syntax
   'logoff $p'
   
  <li> $p - logging is detached from open protocol file

 \section Keywords
   protocol, file, close, output

 * \sa logon
 *
 */
/****************************************************************************/

/****************************************************************************/
/* \page cnom cnom - Write a cnom output file	

 \section Description
   This function writes data in a format suitable for the program cnom 2.0
   written by Susanne Kroemker of the IWR, Heidelberg.
   
\section Syntax
   'cnom ...'
   
 \section Keywords
   file, open, output, data
*/
/****************************************************************************/

/****************************************************************************/
/** \page   configure configure - Configure a BVP

 \section Description
   This command configures the BPV, calling BVP_Configure.
   The arguments depend on the domain module.

\section Syntax
   'configure \<BVP name> ...'

 \section Example
   'configure test $d Quadrilateral $P 2 1.1 1.3'

   In the 2D standard domain module, the BVP test will be coupled with
   a quadrilateral with corners (0,0), (1,0), (1.1,1.3) and (0,1).
   
 \section Keywords
   boundary value problem, change
*/
/****************************************************************************/

/****************************************************************************/
/** \page  close  close - Close current multigrid

 \section Description
   This command closes the current (or all) open multigrid(s),
   frees their heaps and closes all the pictures belonging to them,
   calling DisposeMultiGrid() and DisposePicture().

\section Syntax
   'close [$a]'

  <li>  $a  - close all multigrids
   
 \section Keywords
   multigrid, close
*/
/****************************************************************************/

/****************************************************************************/
/** \page   new new - Allocate a new multigrid

\section Description
   This command allocates a new multigrid, using the function CreateMultiGrid(). 
   It allocates heap and a new multigrid structure.
   The specification of the boundary value problem must be supplied by
   the user with the functions CreateProblem() and CreateDomain().
   It also creates the corner vertices and nodes of the domain.

\section Syntax
   'new [\<mgname>] $b \<boundary value problem> $f \<format> $h \<heapsize> [$n] [$e]'

 <ul>
   <li> \<mgname\>  - the name of the multigrid (default is 'untitled-\<nb\>') </li>
   <li> $b \<boundary~value~problem\> - a boundary value problem </li>
   <li> $f \<format>     - one of the enroled formats matching with \<boundary value problem>  </li>
   <li> $n		- do not use optimized insert element function  </li>
   <li> $e		- empty grid (no vertices, no elements)  </li>
   <li> $h \<heapsize\>  - the heapsize to be allocated in byte (or use suffix 
			    "K" for kilobyte, "M" for megabyte, "G" for gigabyte)  </li>
 </ul>

\section Examples
   'new $p TestProblem $f nc $h 30000000;'
   
   'new $b TestProblem $f nc $h 30000K;'
   
   'new $b TestProblem $f nc $h 30M;'
   
 \section Keywords
   multigrid, new, create

   Implemented in the function NewCommand()
*/
/****************************************************************************/

/****************************************************************************/
/** \page  open open - Load a new multigrid from a data file	

 \section Description
   This command loads a new multigrid, using the function 'LoadMultiGrid'. 
   Usually, this file should be generated by the 'save' command. 
   It allocates the heap and a new multigrid structure.
   The specification of the problem and the domain must be supplied by
   the user with the functions 'CreateProblem' and 'CreateDomain'.

\section Syntax
   'open \<filename> [$t \<type>] [$m \<mg name>] [$b \<problem>] [$f \<format>] [$h \<heapsize>]'

  <ul>
  <li> \<filename>             		- the name of the multigrid file (the full name will be composed
					to: \<filename>.ug.mg.\<type> </li>
  <li> $t \<type>			- file was saved with type: asc (default) or bin </li>
  <li> $m \<mg name>			- grid will be created with this name </li>
  <li> $p \<boundary value problem>	- a boundary value problem (overrides saved one) </li>
  <li> $f \<format>            		- one of the enroled formats matching with \<boundary value problem>
									(overrides saved one) </li>
  <li> $h \<heapsize>          		- the heapsize to be allocated
									(overrides saved one) </li>
  </ul>   

 \section Keywords
   multigrid, new, open, file

   \sa
   'new'
*/
/****************************************************************************/

/****************************************************************************/
/** \page average average - Average result of a plot proc to nodal vector

 \section Description
   The average command takes a plot procedure (scalar or vector), allocates
   a vec data desc with nodal components and computes a conforming
   approximation of the function via a box-volume weighted average.
   The vec data desc will be given the same name as the plot procedure. The
   freeaverage command is called with same arguments and deallocates the vec data
   descs. The vec data descs are not locked!

\section Syntax
   'average {$ns \<scalar plot proc> [$s \<sym>] | $nv \<vector plot proc> [$s \<sym>]}*'

 \section Example
\verbatim
average $nv uwTrans $s sol $nv unTrans $s sol;
savedata air3d $t xdr $n \@step $T \@TIME $a sol $b uwTrans $c unTrans;
freeaverage $nv uwTrans $s sol $nv unTrans $s sol;
\endverbatim


 \section Keywords
   file, output

*/
/****************************************************************************/

/****************************************************************************/
/** \page freeaverage freeaverage - Average result of a plot proc to nodal vector

 \section Description
   The average command takes a plot procedure (scalar or vector), allocates
   a vec data desc with nodal components and computes a conforming
   approximation of the function via a box-volume weighted average.
   The vec data desc will be given the same name as the plot procedure. The
   freeaverage command is called with same arguments and deallocates the vec data
   descs. The vec data descs are not locked!

\section Syntax
   'freeaverage {$ns \<scalar plot proc> [$s \<sym>] | $nv \<vector plot proc> [$s \<sym>]}*'

 \section Example
\verbatim
average $nv uwTrans $s sol $nv unTrans $s sol;
savedata air3d $t xdr $n \@step $T \@TIME $a sol $b uwTrans $c unTrans;
freeaverage $nv uwTrans $s sol $nv unTrans $s sol;
\endverbatim


 \section Keywords
   file, output

*/
/****************************************************************************/


/****************************************************************************/
/** \page savedata  savedata - Save multigrid data in a file

 \section Description
   This function saves multigrid data from the current multigrid in a file.
   The multigrid has to be saved before.

\section Syntax
   'savedata \<filename> [$t \<type>] [$n \<number>] [$T \<time>] [$r [0|1]] [$a \<vd name> [$b \<vd name>[$c \<vd name>[$d \<vd name>[$e \<vd name>]]]]]'
   
  <li> \<filename>		- the filename will be composed to \<filename>.ug.data.\<type>
  <li> $t~\<type>		- type can be asc (default) or bin
  <li> $n~\<number>		- picture number for movie
  <li> $T~\<time>		- assign this time level
  <li> $a~\<vd name>...	- read data from this vec data descriptors
  <li> $r~[0|1]			- 0: replace (default), 1: rename existing data file (using modification date)
   
 \section Keywords
   multigrid, save, write, data, file, output
*/
/****************************************************************************/

/****************************************************************************/
/** \page loaddata  loaddata - Load multigrid data from a file

 \section Description
   This function loads multigrid data from a file. 

\section Syntax
   'loaddata \<filename> [$t \<type>] [$n \<number>] [$f [$h \<heapsize>]] [$a \<vd name> [$b \<vd name>[$c \<vd name>[$d \<vd name>[$e \<vd name>]]]]]'
   
  <li> \<filename>		- the filename will be composed to \<filename>.ug.data.\<type>
  <li> $t~\<type>		- type can be asc (default) or bin
  <li> $n~\<number>		- picture number of movie
  <li> $f				- open or reopen multigrid corresponding to data file
  <li> $h~\<heapsize>    - the heapsize to be allocated
									(overrides saved one)
  <li> $a~\<vd name>...	- save data to this vec data descriptors
  <li> $r 				- read data in current multigrid
   
 \section Keywords
   multigrid, load, read, file, data
*/
/****************************************************************************/

/****************************************************************************/
/** \page  level level - Select another current level

 \section Description
   This command changes another current level of the current multigrid.

\section Syntax
   level \<level> | + | -

  <li> \<level> - go to level \<level>
  <li> +       - go to the next finer level 
  <li> -       - go to the next coarser level 
   
 \section Keywords
   multigrid, current
*/ 
/****************************************************************************/

/****************************************************************************/
/** \page  renumber renumber - Reassign the object IDs in the multigrid	


 \section Description
   This command reassigns the object IDs in the multigrid 
   subsequently to fill the gaps, calling the function 'RenumberMultiGrid'.

\section Syntax
   'renumber'
   
 \section Keywords
   multigrid, id
*/
/****************************************************************************/

/****************************************************************************/
/** \page  mglist mglist - List information on all multigrids

 \section Description
   This command lists information on all multigrids, calling
   the functions 'ListMultiGridHeader' and 'ListMultiGrid'.

\section Syntax
   'mglist [$s]'

  <li> $s - short format for less information
   
 \section Keywords
   multigrid, list, display, show
*/
/****************************************************************************/

/****************************************************************************/
/** \page  glist glist - List information on the current multigrid

 \section Description
   This command lists information on the current multigrid, calling
   the function 'ListGrids'.

\section Syntax
   'glist'
   
 \section Keywords
   multigrid, list, display, show
*/
/****************************************************************************/

/****************************************************************************/
/** \page  rlist rlist - List rule records of element type for refinement

 \section Description
   This command lists the rule record of a refinement rule for an element type,
   if an integer is given or all records for this element type, if all-option is set.

\section Syntax
   'rlist [tri|qua|tet|hex] {[rulenumber] | [$a]}'

  <li> $a  - list all rules for element type
   
 \section Keywords
   multigrid, element, rule, type, list, display, show
*/
/****************************************************************************/

/****************************************************************************/
/** \page convert convert - Convert a matrix into a sparse format
   
   This command converts a matrix into a sparse format,
   prints it out or svae it to a file.
   
\section Syntax
   `convert \<mat> [$p] [$f \<name>]`
  <ul>
    <li> \<mat> - matrix symbol </li>
    <li> $p - print on shell </li>
  </ul>

  Implemented in ConvertCommand().
*/                                                                          
/****************************************************************************/

/****************************************************************************/
/** \page  in  in - Insert an inner node and vertex

 \section Description
   This command inserts an inner node and the corresponding vertex
   into a multigrid with only level 0, calling the function
   'InsertInnerNode'.

\section Syntax
   'in \<x> \<y> [\<z>]'

  <li> \<x>~\<y>~[\<z>] - specify as much coordinates as the space has dimensions
   
 \section Keywords
   multigrid, insert, create, node, edit
*/
/****************************************************************************/

/****************************************************************************/
/** \page  bn bn - Insert a boundary node and vertex

 \section Description
   This command inserts an boundary node and the corresponding vertex
   into a multigrid with only level 0, calling the function
   'InsertBoubdaryNode'. The options are passed to the domain module function BVP_InsertBndP.

\section Syntax
   'bn...'

   for the domain module std .... is
   '\<Id> \<s> [\<t>]'
  <li> \<Id>        	- insert a boundary node on the patch with \<Id>
  <li> \<s>~[\<t>]    - specify as much patch coordinates as the boundary has dimensions
   
 \section Keywords
   multigrid, insert, create, node, edit
*/
/****************************************************************************/

/****************************************************************************/
/** \page  gn gn - Insertion of a boundary/inner node and vertex from global coordinates

 \section Description
   This command inserts a boundary node if a position can be found matching the
   global point with prescribed or default accuracy. Otherwise an inner node
   is inserted at the global position.
   CAUTION: some domain module maybe does not support insertion of boundary
   nodes from global coordinates!
   
\section Syntax
   'gn \<x> \<y> [\<z>] [$r \<res>]'
   
  <li> \<x>~\<y>~[\<z>]		- global coordinates 
  <li> $r~\<res>				- resolution

 \section Keywords
   multigrid, insert, create, node, edit
*/
/****************************************************************************/

/****************************************************************************/
/** \page adapt adapt - Adapt the current multigrid

 \section Description
   This command adapts the multigrid according to the refinement marks 
   set in the elements, calling the function AdaptMultiGrid().
   If coarsen marks are set refinements are deleted.

\section Syntax
   'adapt [$g] [$a] [$h] [$x] [$d \<vector plot proc>]'

<ul>
  <li> no~option		- only local refinement </li>
  <li> $g			- copy nonrefined regions to new level  </li>
  <li> $a			- refine all elements </li>
  <li> $d~\<vector~plot~proc>	- 3D only: use vector eval proc for determination of
				regular refinement direction of tetrahedra </li>
  <li> $h			- refine not closed (not implemented yet) </li>
  <li> $x			- use hexahedra (not implemented yet) </li>
</ul>   

 \section Keywords
   multigrid, adapt, mark
*/
/****************************************************************************/


/****************************************************************************/
/** \page  fixcoarsegrid fixcoarsegrid - Marks the end of corse grid generation

 \section Description
   If the coarse grid is build interactively by 'ie', this command 
   terminates this process and calls 'FixCoarseGrid'.

\section Syntax
   'fixcoarsegrid'
   
 \section Keywords
   multigrid, edit, finish
*/
/****************************************************************************/

/****************************************************************************/
/** \page  collapse collapse - Construct coarse grid from surface

 \section Description
   The coarse grid is build from all surface elements.

\section Syntax
   'collapse'
*/
/****************************************************************************/

/****************************************************************************/
/** \page  ordernodes  ordernodes - Order the nodes lexicographically according to the specified directions


 \section Description
   This command orders the nodes according to the user provided dependencies.
   It orders the nodes of the current multigrid, calling the function
   'OrderNodesInGrid' on all levels.
   
   If specified the links are ordered in the corresponding order.

\section Syntax
   'ordernodes ur|ul|dr|dl|ru|rd|lu|ld [$l \<level>] [$L]'

  <li>  $l~\<level> - only on level \<level>
.n   			   u=up, d=down, r=right, l=left
  <li>  $L		   - also order links

  \section Example
	'ordernodes rd $l2'

   Order nodes of grid level 2 lexicographically in horizontal lines from
   left to right and the lines vertical from top down.
   
 \section Keywords
   multigrid, order
*/
/****************************************************************************/

/****************************************************************************/
/** \page  lexorderv lexorderv - Order the vectors lexicographically


 \section Description
   This command orders the vectors lexicographically according to the user
   specified directions.
   It orders the vectors of the current multigrid, calling the function
   'LexOrderVectorsInGrid'.

\section Syntax
   'lexorderv ur|ul|dr|dl|ru|rd|lu|ld [$l \<level>] [$m] [$w s|n] [$s \<|>]'

  <li>  $l~\<level> - only on level \<level>
.n   			   u=up, d=down, r=right, l=left
  <li>  $m		   - also order matrices
  <li>  $w~s|n	   - order skip or nonskip vectors resp.
  <li>  $s \<|>	   - put skip vectors at begin or end of the list resp.
   
 \section Keywords
   multigrid, order
*/
/****************************************************************************/

/****************************************************************************/
/** \page  shellorderv shellorderv - Order the vectors shell by shell


 \section Description
   This command orders the vectors of the current level of the current
   multigrid in shells starting from a seed.

\section Syntax
   'shellorderv f | l'

  <li> f - take first vector as seed
  <li> l - take last vector as seed

 \section Keywords
   multigrid, order, shell
*/
/****************************************************************************/

/****************************************************************************/
/** \page  orderv orderv - Order the vectors according to the user provided dependencies


 \section Description
   This command orders the vectors according to the user provided dependencies.
   It orders the vectors of the current multigrid, calling the function
   'OrderVectors'.

\section Syntax
   'orderv $m FFCCLL | FCFCLL $d \<dep-proc> $o \<dep-proc options> $c \<find-cut-proc> [$a]'

  <li> $m FFCCLL | FCFCLL     - possible modes are FFCCLL or FCFCLL
  <li> $d \<dep-proc>          - the ordering algorithm uses this dependency procedure...
  <li> $o \<dep-proc options>  - ...and passes these options to it
  <li> $a                     - order all levels of the current multigrid

   SEE ALSO:
   'lineorderv'
   
 \section Keywords
   multigrid, order, downstream
*/
/****************************************************************************/

/****************************************************************************/
/** \page  revvecorder revvecorder - Revert the vector order


 \section Description
   This command reverts the order of the vector list.
   
\section Syntax
   'revvecorder [$a]'

  <li> $a  - reorder all levels of the current multigrid
   
 \section Keywords
   multigrid, order, reverse
*/
/****************************************************************************/

/****************************************************************************/
/** \page  lineorderv lineorderv - Order the vectors in lines according to the user provided dependencies


 \section Description
   This command orders the vectors in lines according to the user provided dependencies.
   It orders the vectors of the current multigrid, calling the function
   'LineOrderVectors'.

\section Syntax
   'lineorderv $d \<dep-proc> $o \<dep-proc options> $c \<find-cut-proc> [$a] [$v \<level>]'

  <li> $d \<dep-proc>          - the ordering algorithm uses this dependency procedure...
  <li> $o \<dep-proc options>  - ...and passes these options to it
  <li> $c					  - user supplied find cut procedure
  <li> $a                     - order all levels of the current multigrid
  <li> $v~\<level>			  - verbose level

   SEE ALSO:
   'orderv'
   
 \section Keywords
   multigrid, order, downstream, lines
*/
/****************************************************************************/

/****************************************************************************/
/** \page  setindex setindex - Set vector index in ascending order

 \section Description
   'setindex' sets the vector index in ascending order.
   
 \section Keywords
   multigrid, vector, index
*/
/****************************************************************************/

/****************************************************************************/
/** \page   extracon extracon - Display number of (and delete) extra connections

 \section Description
   This command displays the number of extra connections 
   (and deletes them if specified).
   Extra connection extend the usual sparsity pattern.

\section Syntax
   'extracon [$d]'

  <li> $c - also check the connections
   
 \section Keywords
   multigrid, matrices, connections, pattern, delete, remove
*/
/****************************************************************************/

/****************************************************************************/
/** \page check check - Check consistency of the data structure

 \section Description
   This command checks consistency of the data structure, using
   the function 'CheckGrid'. Dependent on the options are called inside
   'CheckGrid' one or more of 'CheckGeometry' 'CheckAlgebra', 'CheckLists'
   and 'CheckInterfaces'. Default check is 'CheckGeometry'.

\section Syntax
   'check {$a | $g | $c | $l | $i | $w}*'

  <li> $a - all possible checks are done
  <li> $g - check the geometric part of data structures (default)
  <li> $c - also check the algebraic part of data structures
  <li> $l - also check the lists of objects and counters of a grid
  <li> $i - also check interfaces (only parallel version)
  <li> $b - also check boundary value problems
  <li> $w - print a list of all control words of object types with control entries to stdout
   
 \section Keywords
   multigrid, check, consistency, data structure, algebra, counters, interfaces
*/
/****************************************************************************/

/****************************************************************************/
/** \page  makegrid  makegrid - Generate grid
   
   2D advancing front generator:
   
 \section Description
   This command generates the grid. First, the command bnodes must be called.
   It reads the environment variables ':gg:RelRasterSize', ':gg:h_global',	
   ':gg:searchconst', ':gg:angle', ':gg:epsi'.

\section Syntax
   'makegrid ${W|w|K|k} [$E] [$h \<val>] [$m \<no>] [$S \<search>] [$A \<angle>] [$d \<subdom>]'

  <li> ${W|w|K|k}	- W resp. K are using the quadtree accellerator, 
  <li> $W~resp.~w	- use the angle criterion,
  <li> $K~resp.~k	- use the edge criterion
  <li> $E 			- grid generator tries to create equilateral triangles (edgelength h)
.n 					default: isosceles triangles (height h)
  <li> $h~\<val> 	- mesh size 
  <li> $m~\<no>		- id of mesh size coefficient function 
  <li> $S~\<search>	- search radius (experts only)
  <li> $A~\<angle>	- try to avoid angle smaller than \<angle>
  <li> $d~\<subdom>	- restrict grid generation to subdomain with id \<subdom>

 \section Example
   'makegrid $k $h 1.0;'
   
   
   3D advancing front generator (by J. Schoeberl):
   
 \section Description
   This command invokes the advancing front tetrahedral grid generator.
   
   'makegrid [$s] [$h \<meshsize>] [$d]'

  <li>  $s				- smooth generated grid
  <li>  $h \<meshsize>	- preferred meshsize (default 1.0)
  <li>  $d				- ?
   
 \section Keywords
   multigrid, generate, create, mesh, net, grid, coarse, advancing front
*/
/****************************************************************************/

/****************************************************************************/
/** \page  status  status - Show status about (parallel) multigrid
   
 \section Description
   This command outputs some statistics about red,green yellow element 
   distribution and some loadbalacing measures for parallel.

\section Syntax
  <li> ${W|w|K|k}	- W resp. K are using the quadtree accellerator, 

 \section Keywords
   multigrid, loadbalancing, mesh, net, grid, adaptive refinement, estimator 
*/
/****************************************************************************/

/****************************************************************************/
/** \page  setcurrwindow setcurrwindow - Set the current window

 \section Description
   This command makes a window the current window.	
   It calls the function 'GetUGWindow'.

\section Syntax
   'setcurrwindow \<window name>'

  <li> \<window~name> - name of a window
   
 \section Keywords
   graphics, plot, window, current, active

   SEE ALSO:
   'openwindow'
*/
/****************************************************************************/

/****************************************************************************/
/** \page  reinit reinit - Reinitialize a boundary value problem

 \section Description
   This command reinitializes the problem with the user defined reinit of the 
   problem. All arguments are passed to the reinit function

\section Syntax
   'reinit [$b \<boundary value problem>] ...'

  <li> $b~\<boundary~value~problem> - problem to initialize
							     (default is the problem of the current mg)
   
 \section Keywords
   multigrid, boundary value problem, configure, change
*/
/****************************************************************************/

/****************************************************************************/
/** \page  resetCEstat resetCEstat - Reset counters of control entry usage

 \section Description
   This command resets the counters of control entry usage.

 \section Syntax
   'resetCEstat'
   
 \section Keywords
   control entries

   SEE ALSO:
   'printCEstat'
*/
/****************************************************************************/

/****************************************************************************/
/** \page  printCEstat printCEstat - Print counters of control entry usage

 \section Description
   This command prints the counters of control entry usage.

 \section Syntax
   'printCEstat'
   
 \section Keywords
   control entries

   SEE ALSO:
   'resetCEstat'
*/
/****************************************************************************/

/****************************************************************************/
/** \page  heapstat heapstat - List information about heap of current multigrid

 \section Description
   This command lists information on the heap of the current multigrid, calling
   the function 'HeapStat'.

 \section Syntax
   'heapstat'
   
 \section Keywords
   heap, multigrid, freelists 
*/
/****************************************************************************/

/****************************************************************************/
/** \page  getheapused getheapused - Get size of used heap of current multigrid

 \section Description
   This command gets the size of used heap of the current multigrid and puts
   the result in the environment variable :HEAPUSED.

 \section Syntax
   'getheapused'
   
 \section Keywords
   heap, multigrid, freelists, memory, used, get, free 
*/
/****************************************************************************/

/****************************************************************************/
/** \page lb  lb - A simple load balancing front end to chaco
   			based on the clustering technique

 \section Description
   The lb command performs load balancing  <li> If not run on a parallel machine
   it will do nothing  <li> If run on a parallel machine it will try to use Chaco,
   provided the CHACO option for ug was turned on  <li> If Chaco is not available
   a simple RCB load balancing will be employed  <li> In the latter case some of
   the optional arguments will be ignored.
   
 \section Syntax
   'lb  [\<strategy>] [$c \<minlevel>] [$d \<depth>] [$f \<maxlevel>] [$e \<minelem>]'

  <li> \<strategy>		- load balancing strategy 
  <li> $c \<minlevel>	- start load balancing at this level
  <li> $d \<depth>		- depth of clusters
  <li> $f \<maxlevel>	- no load balancing above this level
  <li> $e \<minelem>		- minimal number of elements on each processor

 \section Keywords
   parallel, processors, load balance, chaco
*/
/****************************************************************************/

/****************************************************************************/
/** \page lbs lbs - Simple or special load balancing functionality

 \section Description
   ...
   
 \section Syntax
   'lbs ...'

 \section Keywords
   parallel, processors, check, load balancing
*/
/****************************************************************************/

/****************************************************************************/
/** \page context  context - Manipulate current processor context

 \section Description
   This command adds/removes processors from the current context.
   
 \section Syntax
   'context \<processor\> | $a | $e'
   
  <li> \<processor>		- processor id
  <li> $a				- add all processors
  <li> $e				- remove all processors (empty context)
   
 \section Keywords
   parallel, processors, display, show, print, DDD, configure
*/
/****************************************************************************/

/****************************************************************************/
/** \page pstat  pstat - Gives information about parallel data structures

 \section Description
   ...
   
 \section Syntax
   'pstat ...'

   first argument will be passed to DDD
   
 \section Keywords
   parallel, processors, display, show, print, DDD, status, interfaces
*/
/****************************************************************************/

/****************************************************************************/
/** \page
   dlb_eval - gives information current load balancing situation

 \section Description
   information on the current load balancing situation of MultiGrid
   
 \section Syntax
   'dlb_eval $v \<0-n>'

   
 \section Keywords
   load balancing, status, load, interfaces, partition graph
*/
/****************************************************************************/

/****************************************************************************/
/** \page
   lb4 - load balancer using different (high level) strategies
   			based on the clustering technique

 \section Description
   ...
   
 \section Syntax
   'lb4 ...'
   
 \section Keywords
   parallel, processors, load balance, chaco
*/
/****************************************************************************/

/****************************************************************************/
/** \page  debug debug - Set or display debug level for ug kernel subsystem

 \section Description
   This command sets the debug level for a ug kernel subsystem.
   
 \section Syntax
   'debug $\<module> [$\<level>]'

  <li>  $\<module>	- module can be one of
.n					init
.n					dddif
.n					dev
.n					dom
.n					gm
.n					graph
.n					low
.n					machines
.n					np
.n					ui
.n					time
.n                  pclib
.n                  appl
  <li>  $\<level>	- assign this level (if omitted display current level for the
					specified module)
   
 \section Keywords
   debug, configure, set, display, show, print
*/
/****************************************************************************/

/****************************************************************************/
/** \page  trace trace - Trace a module

 \section Description
   This command sets the trace level of modules (blas only up to now).

 \section Syntax
   'trace [$blas \<n>]'
  <li>  $blas~\<n>	- 0: off, 1: show parameters (default),
					2: parameters and vector contents (blas level 1)
   
 \section Keywords
   debug, trace, ugblas
*/
/****************************************************************************/

/****************************************************************************/
/** \page  reperr reperr - Prints the error stack

 \section Description
   This command prints the error stack which is created when functios use
   the REP_ERR_RETURN macro. The stack is cleared before each call of a ug-command.
   
   File and line of the returning functions are printed.

 \section Syntax
   'reperr'
   
 \section Keywords
   debug, stack, error, display, show, print
*/
/****************************************************************************/

/****************************************************************************/
/** \page   showconfig showconfig - Show the main configuration settings of this ug-program

 \section Description
   This command shows the main configuration options having been active
   when this ug was compiled.
   
 \section Syntax
   'showconfig'
   
 \section Keywords
   debug, check, configure, show, display, print
*/
/****************************************************************************/
