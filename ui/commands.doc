

/****************************************************************************/
/*! \page quit quit - Quits UG

   This command quits the program and closes the shell.

\section Syntax
   'quit'
   
 \section Keywords
   exit, terminate, bye
*/
/****************************************************************************/


/****************************************************************************/
/** \page   exitug  exitug - Exits UG

   This command exits the current application and closes the shell.

\section Syntax
   'exitug'
   
 \section Keywords
   terminate, bye, tschuess
*/
/****************************************************************************/

/****************************************************************************/
/** \page mute mute - Set mutelevel

   This command sets a mutelevel. 
   The default value is 0 and all skript lines will be printed on the shell.
   This will be suppressed by mutelevel -1.
   Smaller muteleveles should reduce the output further.
   A mutelevel of -1000 supresses all output to shell.

\section Syntax
   'mute \<value>'
  <li>  \<value> - integer which gives the mutelevel

   REMARK:
   Formally, this is not an ug command, 'mute' is checked in 
   'InterpretString'.
   
 \section Keywords
   verbose, quiet, silent
*/
/****************************************************************************/

/****************************************************************************/
/** \page   help help - Print help for a command or keyword

   This command prints help for a given helpitem, e.g. a command. The helpitem
   is looked up case insensitive. Command names can be abbreviated as if they
   where called from the shell window.

\section Syntax
   help [[\<helpitem>] $k]

  <li>  no~option      - this is  equivalent to 'help help'
  <li>  \<helpitem>     - print help for \<helpitem> (string)
  <li>  $k             - search for keyword \<helpitem> (multiple occurence)

 \section Example
   'help PlotObj'
   
   prints help for the plotobject command.
   
   'help plot $k'

   prints a list of all commands which are relevant for plotting
   (openwindow, setview, zoom ...)
*/
/****************************************************************************/

/****************************************************************************/
/** \page   checkhelp checkhelp - Check wether all commands in /menu have a help item

 \section Description
   This function checks wether for all commands in /menu a help item exists.
   It also checks wether for all num proc types a help item exists.
   
   It prints all commands and num proc types for which help does NOT exist.
 
   It calls the funtion 'CheckHelp'.

\section Syntax
   'checkhelp'
   
 \section Keywords
   check
*/
/****************************************************************************/


/****************************************************************************/
/** \page   cmfn cmfn - Creates a metafile name

 \section Description
   This command creates a metafile names.
   It creates a string containing the name of a metafile name for
   animation by xugv.

\section Syntax
   'cmfn \<name> \<var>'

  <li> \<name> - first part of the metafile names
  <li> \<var> - the contents of var will be appended to the name

 \section Example
\verbatim
frame="
    cmfn film step;
    openwindow 0 0 820 420 $d meta $n \@film;
    openpicture $s 10 10 800 400 $n framepic;
    setplotobject EScalar $e S2 $m COLOR $d 0 $f 0.0 $t 1.0;
    setview;
    zoom 0.4;
    plot;
    closewindow;
";
step = 0;
steps = 100;
\@frame;
repeat {
    print "STEP ", step;
    \@mysolve; 
    step=step+1;
    \@frame;
    if (step==steps) break;
}
\endverbatim

   This runs 'mysolve' 100 times and 
   creates metafiles 'film.0000', 'film.0001', 'film.0002', ... 'film.0100'.
   
 \section Keywords
   movie, film
*/
/****************************************************************************/

/****************************************************************************/
/** \page   readclock readclock - Print execution time

 \section Description
   This command is for measuring the time used.
   It prints the execution time since the last 'resetclock' to
   string variable ':CLOCK'.

\section Syntax
   'readclock'   
   
 \section Keywords
   time, stopwatch, clock
   
   \sa resetclock
*/
/****************************************************************************/

/****************************************************************************/
/** \page   resetclock resetclock - Start the time mesuring

 \section Description
   This command starts the time mesuring. 
   It sets the global variable 'Time0' to zero.

\section Syntax
   'resetclock'
   
 \section Keywords
   time, stopwatch, clock
   
 * \sa readclock
*/
/****************************************************************************/

/****************************************************************************/
/** \page   date date - Prints the date

 \section Description
   This command prints the date to the shell resp. 
   writes it in the string variable ':date'.

\section Syntax
   'date [$s] [$S]'

  <li> no~option - print the date to the shell
  <li> $s  		 -  put in the string variable ':date'.
  <li> $S   	 -  use short format of the form yy.mm.dd
   
 \section Keywords
   time, calendar
   
   \sa resetclock, readclock
*/
/****************************************************************************/

/****************************************************************************/
/** \page   ls ls - Lists the content of an environment directory.

 \section Description
   This command lists the content of an environment directory.

   'ls [\<path\>]'

   <ul>
     <li>  no option - lists the content of the current directory. </li>
     <li>  \<path\>    - contains the relative or absolute path in UNIX-style </li>
   </ul>
   
 \section Keywords
   environment, directory, list

   Implemented in \ref ListEnvCommand().
*/
/****************************************************************************/

/****************************************************************************/
/** \page cd  cd - Change the current environment directory.

 \section Description
   This command changes the current environment directory.
   It uses the function 'ChangeEnvDir'.

\section Syntax
   'cd [\<path>]'

  <li> no~option - cd to root (cd /)
  <li> \<path>	 - \<path> contains the relative or absolute path in UNIX-style
   
 \section Keywords
   environment, directory, working
*/
/****************************************************************************/

/****************************************************************************/
/** \page   pwd pwd - Print the current environment directory

 \section Description
   This command print the current environment directory to the shell.
   It uses the function 'CangeEnvDir'.

\section Syntax
   'pwd'
   
 \section Keywords
   environment, directory, working
*/
/****************************************************************************/

/****************************************************************************/
/** \page   envinfo envinfo - Print total size and used memory

 \section Description
   This command prints total size and used memory of the emvironment to shell.

\section Syntax
   'envinfo'
   
 \section Keywords
   environment, size, heap, memory
*/
/****************************************************************************/

/****************************************************************************/
/** \page   set set - Set (or print) a string variable struct	

 \section Description
   This command sets (or prints) a string variable struct.
   If it is not existing it is also created.
   It sets or prints the contents of a struct or struct directory.

\section Syntax
   'set {\<struct> \<value>} | {[\<structdir> | \<struct>] [$r]}'

  <li> \<struct>~\<value>   			- assign \<value> (just a string of arbitrary length) to \<struct>
  <li> [\<structdir>|\<struct>]~[$r]  - display contents of \<struct> or \<structdir> 
.n                                (default: current struct dir)
  <li> $r        					- specifies the directory, its contents is listed recursively
   
 \section Keywords
   variable, create, set, assign, value, struct, show, display, print

  \sa structpath
*/
/****************************************************************************/

/****************************************************************************/
/** \page   dv dv - Delete an existing string variable

 \section Description
   This command deletes an existing string variable from the environment.

\section Syntax
   dv \<variable name>

  <li> \<variable name>    - \<variable name> consists of a complete path related to the
                        current struct dir or the structure root directory in the environment
   
 \section Keywords
   variable, remove, delete

   SEE ALSO:
   def, structpath, dv
*/
/****************************************************************************/

/****************************************************************************/
/** \page   ms ms  - Create a structure

 \section Description
   This commands creates a new string variable struct.
   It calls the function 'MakeStruct'.

\section Syntax
   'ms \<structdir>'

  <li> \<structdir>     - the \<structdir> consists of a complete path related to the
                     current struct dir or the string variable root in the environment
   
 \section Keywords
   variable, create, struct

   SEE ALSO:
   'structpath'
*/
/****************************************************************************/

/****************************************************************************/
/** \page cs  cs  - Change to a struct directory
 *
 \section Description
   This commands changes to a struct directory.
   It calls the function 'ChangeStructDir'.

\section Syntax
   'cs \<structdir>'

  <li> \<structdir>   - the \<structdir> consists of a complete path related to the
                   current struct dir or the string variable root in the environment
   
 \section Keywords
   variable, struct, change
*/
/****************************************************************************/

/****************************************************************************/
/** \page   pws  pws  - Print the current struct path

 \section Description
   This commands calls the function 'GetStructPathName' and 
   prints the result to the shell.

\section Syntax
   'pws'
   
 \section Keywords
   variable, print, display, show, struct
*/
/****************************************************************************/

/****************************************************************************/
/** \page   ds ds  - Deletes a struct 

 \section Description
   This commands calls the function 'DeleteStruct' to remove a struct.

\section Syntax
   'ds \<structdir>'

  <li> \<structdir>   - the \<structdir> consists of a complete path related to the
.n                 current struct dir or the string variable root in the environment
   
 \section Keywords
   variable, delete, remove, struct
   
   SEE ALSO:
   dv, structpath

*/
/****************************************************************************/

	
/****************************************************************************/
/** \page protocol protocol - Print strings to the protocol file

  \section Description

   This command prints strings to protocol file.
   It writes formatted output to the open protocol file.

\section Syntax
   'protocol {$i[ ]\<verbatim text> | $n[ ]\<verbatim text> | $t[ ]\<verbatim text> | $f}*'

  <li>  $%i   - append \<verbatim text> to protocol file
  <li>  $%n   - write a line feed and append \<verbatim text> to protocol file
  <li>  $%t   - write a tab and append \<verbatim text> to protocol file
.n          NOTE: the first space (if there) following the option character is skipped
  <li>  $%f   - flush the file buffer

  \section Example
\verbatim
x = exp(1);
protoOn exp.proto;
protocol $%i the value of exp(1) is $%t \@x;
protocol $%n you can use $s in protocol;
protoOff 
\endverbatim

Then, the file 'exp.proto' will consist of the string
\verbatim
"the value of exp(1) is\t2.7182818\nyou can use $s in protocol"
\endverbatim
   
   \section Keywords
   protocol, file, output, format
  
   \sa protoOn, protoOff
*/
/****************************************************************************/

/****************************************************************************/
/** \page   protoOn protoOn - Open protocol file where specially formatted output is saved
  
 \section Description
   This command opens protocol file where specially formatted output is saved.

\section Syntax
   'protoOn \<filename> [$r[!] | $a]'

  <li>  \<filename>  - name of the protocol file      
  <li>   $r!        - if a file named \<filename> exist already, rename it to \<filename>.saved
.n                break if the renaming fails
  <li>  $r          - like above but proceed even if renaming fails
  <li>  $a          - append to existing file named \<filename>
   
 \section Keywords
   protocol, file, open, output, format

   SEE ALSO:
   'protoOff', 'protocol'
*/
/****************************************************************************/

/****************************************************************************/
/** \page   protoOff protoOff - close protocol file 
  
 \section Description
   This command closes the protocol file.

\section Syntax
   'protoOff'
   
 \section Keywords
   protocol, file, close, output, format

   SEE ALSO:
   'protoOn', 'protocol'
*/
/****************************************************************************/

/****************************************************************************/
/** \page logon logon - Open log file where all shell output is saved
  
 \section Description
   This command opens a log file where all shell output is saved.

\section Syntax
   'logon \<logfilename> [$p] [$e] [$a] [$f] [$r [0|1]]'

  <li>  \<filename>  - name of logfile
  <li>  $p			- write log to open protocol file
  <li>  $e			- extend filename with numbers of processors (parallel only)
  <li>  $a			- extend filename with processor id (parallel only)
  <li>  $f			- force (close open logfile iff)
  <li>  $r~[0|1]	- 0: replace (default), 1: rename existing log file (using modification date)
   
 \section Keywords
   protocol, file, open, output

   SEE ALSO:
   'logoff'    
*/
/****************************************************************************/

/****************************************************************************/
/** \page logoff logoff - Close logfile
  
 \section Description
   This command closes the logfile.

\section Syntax
   'logoff $p'
   
  <li> $p - logging is detached from open protocol file

 \section Keywords
   protocol, file, close, output

 * \sa logon
 *
 */
/****************************************************************************/

/****************************************************************************/
/* \page cnom cnom - Write a cnom output file	

 \section Description
   This function writes data in a format suitable for the program cnom 2.0
   written by Susanne Kroemker of the IWR, Heidelberg.
   
\section Syntax
   'cnom ...'
   
 \section Keywords
   file, open, output, data
*/
/****************************************************************************/

/****************************************************************************/
/** \page   configure configure - Configure a BVP

 \section Description
   This command configures the BPV, calling BVP_Configure.
   The arguments depend on the domain module.

\section Syntax
   'configure \<BVP name> ...'

 \section Example
   'configure test $d Quadrilateral $P 2 1.1 1.3'

   In the 2D standard domain module, the BVP test will be coupled with
   a quadrilateral with corners (0,0), (1,0), (1.1,1.3) and (0,1).
   
 \section Keywords
   boundary value problem, change
*/
/****************************************************************************/

/****************************************************************************/
/** \page  close  close - Close current multigrid

 \section Description
   This command closes the current (or all) open multigrid(s),
   frees their heaps and closes all the pictures belonging to them,
   calling DisposeMultiGrid() and DisposePicture().

\section Syntax
   'close [$a]'

  <li>  $a  - close all multigrids
   
 \section Keywords
   multigrid, close
*/
/****************************************************************************/

/****************************************************************************/
/** \page   new new - Allocate a new multigrid

\section Description
   This command allocates a new multigrid, using the function CreateMultiGrid(). 
   It allocates heap and a new multigrid structure.
   The specification of the boundary value problem must be supplied by
   the user with the functions CreateProblem() and CreateDomain().
   It also creates the corner vertices and nodes of the domain.

\section Syntax
   'new [\<mgname>] $b \<boundary value problem> $f \<format> $h \<heapsize> [$n] [$e]'

 <ul>
   <li> \<mgname\>  - the name of the multigrid (default is 'untitled-\<nb\>') </li>
   <li> $b \<boundary~value~problem\> - a boundary value problem </li>
   <li> $f \<format>     - one of the enroled formats matching with \<boundary value problem>  </li>
   <li> $n		- do not use optimized insert element function  </li>
   <li> $e		- empty grid (no vertices, no elements)  </li>
   <li> $h \<heapsize\>  - the heapsize to be allocated in byte (or use suffix 
			    "K" for kilobyte, "M" for megabyte, "G" for gigabyte)  </li>
 </ul>

\section Examples
   'new $p TestProblem $f nc $h 30000000;'
   
   'new $b TestProblem $f nc $h 30000K;'
   
   'new $b TestProblem $f nc $h 30M;'
   
 \section Keywords
   multigrid, new, create

   Implemented in the function NewCommand()
*/
/****************************************************************************/

/****************************************************************************/
/** \page  open open - Load a new multigrid from a data file	

 \section Description
   This command loads a new multigrid, using the function 'LoadMultiGrid'. 
   Usually, this file should be generated by the 'save' command. 
   It allocates the heap and a new multigrid structure.
   The specification of the problem and the domain must be supplied by
   the user with the functions 'CreateProblem' and 'CreateDomain'.

\section Syntax
   'open \<filename> [$t \<type>] [$m \<mg name>] [$b \<problem>] [$f \<format>] [$h \<heapsize>]'

  <ul>
  <li> \<filename>             		- the name of the multigrid file (the full name will be composed
					to: \<filename>.ug.mg.\<type> </li>
  <li> $t \<type>			- file was saved with type: asc (default) or bin </li>
  <li> $m \<mg name>			- grid will be created with this name </li>
  <li> $p \<boundary value problem>	- a boundary value problem (overrides saved one) </li>
  <li> $f \<format>            		- one of the enroled formats matching with \<boundary value problem>
									(overrides saved one) </li>
  <li> $h \<heapsize>          		- the heapsize to be allocated
									(overrides saved one) </li>
  </ul>   

 \section Keywords
   multigrid, new, open, file

   \sa
   'new', 'save'
*/
/****************************************************************************/

/****************************************************************************/
/** \page  save save - Save a multigrid structure in a file

 \section Description
   This command writes the current multigrid structure in a file. 

\section Syntax
   'save [\<name>] [$t \<type>] [$r [0|1]] [$c \<comment>]'

  <ul>
  <li> \<name>                  - name to save with (default is the mgname) </li>
.n								if name is ending in .scr a script file is saved which
								will generate the surface of the grid as level 0 on execution
  <li> $t~\<type>			   - type can be asc (default> or bin. asc and bin can be opened with
								the open command </li>
  <li> $c~\<comment>            - optionally specify a comment string </li>
  <li> $r~[0|1]                - 0: replace (default), 1: rename existing mg file (using modification date) </li>
  </ul>   

 \section Keywords
   multigrid, save, write, data, file, output

   \sa
   open
*/
/****************************************************************************/

/****************************************************************************/
/** \page  savedomain savedomain - Save domain structure in a file

 \section Description
   This command saves the domain structure of the current multigrid in a file.
   All arguments are passed to the current domain module interface function.

\section Syntax
   'savedomain ...'
   
   SEE ALSO:
   'open'
   
 \section Keywords
   multigrid, domain, save, write, data, file, output
*/
/****************************************************************************/

/****************************************************************************/
/** \page average average - Average result of a plot proc to nodal vector

 \section Description
   The average command takes a plot procedure (scalar or vector), allocates
   a vec data desc with nodal components and computes a conforming
   approximation of the function via a box-volume weighted average.
   The vec data desc will be given the same name as the plot procedure. The
   freeaverage command is called with same arguments and deallocates the vec data
   descs. The vec data descs are not locked!

\section Syntax
   'average {$ns \<scalar plot proc> [$s \<sym>] | $nv \<vector plot proc> [$s \<sym>]}*'

 \section Example
\verbatim
average $nv uwTrans $s sol $nv unTrans $s sol;
savedata air3d $t xdr $n \@step $T \@TIME $a sol $b uwTrans $c unTrans;
freeaverage $nv uwTrans $s sol $nv unTrans $s sol;
\endverbatim


 \section Keywords
   file, output

*/
/****************************************************************************/

/****************************************************************************/
/** \page freeaverage freeaverage - Average result of a plot proc to nodal vector

 \section Description
   The average command takes a plot procedure (scalar or vector), allocates
   a vec data desc with nodal components and computes a conforming
   approximation of the function via a box-volume weighted average.
   The vec data desc will be given the same name as the plot procedure. The
   freeaverage command is called with same arguments and deallocates the vec data
   descs. The vec data descs are not locked!

\section Syntax
   'freeaverage {$ns \<scalar plot proc> [$s \<sym>] | $nv \<vector plot proc> [$s \<sym>]}*'

 \section Example
\verbatim
average $nv uwTrans $s sol $nv unTrans $s sol;
savedata air3d $t xdr $n \@step $T \@TIME $a sol $b uwTrans $c unTrans;
freeaverage $nv uwTrans $s sol $nv unTrans $s sol;
\endverbatim


 \section Keywords
   file, output

*/
/****************************************************************************/


/****************************************************************************/
/** \page savedata  savedata - Save multigrid data in a file

 \section Description
   This function saves multigrid data from the current multigrid in a file.
   The multigrid has to be saved before.

\section Syntax
   'savedata \<filename> [$t \<type>] [$n \<number>] [$T \<time>] [$r [0|1]] [$a \<vd name> [$b \<vd name>[$c \<vd name>[$d \<vd name>[$e \<vd name>]]]]]'
   
  <li> \<filename>		- the filename will be composed to \<filename>.ug.data.\<type>
  <li> $t~\<type>		- type can be asc (default) or bin
  <li> $n~\<number>		- picture number for movie
  <li> $T~\<time>		- assign this time level
  <li> $a~\<vd name>...	- read data from this vec data descriptors
  <li> $r~[0|1]			- 0: replace (default), 1: rename existing data file (using modification date)
   
 \section Keywords
   multigrid, save, write, data, file, output

   SEE ALSO:
   'save'
*/
/****************************************************************************/

/****************************************************************************/
/** \page loaddata  loaddata - Load multigrid data from a file

 \section Description
   This function loads multigrid data from a file. 

\section Syntax
   'loaddata \<filename> [$t \<type>] [$n \<number>] [$f [$h \<heapsize>]] [$a \<vd name> [$b \<vd name>[$c \<vd name>[$d \<vd name>[$e \<vd name>]]]]]'
   
  <li> \<filename>		- the filename will be composed to \<filename>.ug.data.\<type>
  <li> $t~\<type>		- type can be asc (default) or bin
  <li> $n~\<number>		- picture number of movie
  <li> $f				- open or reopen multigrid corresponding to data file
  <li> $h~\<heapsize>    - the heapsize to be allocated
									(overrides saved one)
  <li> $a~\<vd name>...	- save data to this vec data descriptors
  <li> $r 				- read data in current multigrid
   
 \section Keywords
   multigrid, load, read, file, data

   SEE ALSO:
   'save'
*/
/****************************************************************************/

/****************************************************************************/
/** \page changemc  changemc - Change magic cookie of multigrid

 \section Description
   This function changes the magic cookie of multigrid.

\section Syntax
   'changemc \<mc>'
   
  <li> \<mc>				- new magic cookie
   
 \section Keywords
   multigrid, load, read, file, data

   SEE ALSO:
   'save'
*/
/****************************************************************************/

/****************************************************************************/
/** \page  level level - Select another current level

 \section Description
   This command changes another current level of the current multigrid.

\section Syntax
   level \<level> | + | -

  <li> \<level> - go to level \<level>
  <li> +       - go to the next finer level 
  <li> -       - go to the next coarser level 
   
 \section Keywords
   multigrid, current
*/ 
/****************************************************************************/

/****************************************************************************/
/** \page  renumber renumber - Reassign the object IDs in the multigrid	


 \section Description
   This command reassigns the object IDs in the multigrid 
   subsequently to fill the gaps, calling the function 'RenumberMultiGrid'.

\section Syntax
   'renumber'
   
 \section Keywords
   multigrid, id
*/
/****************************************************************************/

/****************************************************************************/
/** \page wplist  wplist - List information on all windows and pictures

 \section Description
   This command lists information on all windows and pictures, calling
   the functions 'ListWindowPictureHeader', 'ListPicture' and 
   'ListUGWindow'.

\section Syntax
   'wplist'
   
 \section Keywords
   graphics, plot, window, list, display, show
*/
/****************************************************************************/

/****************************************************************************/
/** \page  mglist mglist - List information on all multigrids

 \section Description
   This command lists information on all multigrids, calling
   the functions 'ListMultiGridHeader' and 'ListMultiGrid'.

\section Syntax
   'mglist [$s]'

  <li> $s - short format for less information
   
 \section Keywords
   multigrid, list, display, show
*/
/****************************************************************************/

/****************************************************************************/
/** \page  glist glist - List information on the current multigrid

 \section Description
   This command lists information on the current multigrid, calling
   the function 'ListGrids'.

\section Syntax
   'glist'
   
 \section Keywords
   multigrid, list, display, show
*/
/****************************************************************************/

/****************************************************************************/
/** \page  nlist nlist - List information on specified nodes

 \section Description
   This command lists information on specified nodes, calling
   the functions 'ListNodeRange' and 'ListNodeSelection'.

\section Syntax
   'nlist {$s | $i \<fromID> [\<toID>] | $g \<global id> | $k \<key>} [$d] [$b] [$n] [$v] [$a]'

  <li> $s  - list info for the selected nodes
  <li> $i  - list info for nodes with an ID in the range \<fromID> through \<toID>
         if \<fromID> is omitted only the node with \<fromID> is listed
  <li> $g \<glob. id>- list info for node with global id (only for ModelP)
  <li> $k \<key>     - list info for node with key

  <li> $d  - up to version 2.3 ONLY: list also user data space
  <li> $b  - print additional info for boundary nodes
  <li> $n  - list also neighbours of each node
  <li> $v  - print extended info (verbose mode)
  <li> $a  - list all nodes
   
 \section Keywords
   multigrid, node, link, list, display, show
*/
/****************************************************************************/

/****************************************************************************/
/** \page   elist elist - List information on specified elements

 \section Description
   This command lists information on specified elements, calling
   the functions 'ListElementRange' and 'ListElementSelection'.

\section Syntax
   'elist $s | {$i \<fromID> [\<toID>]} [$d] [$b] [$n] [$v] [$a]'

  <li> $s  - list info for the selected elements
  <li> $i  - list info for elements with an ID in the range \<fromID> through \<toID>
         if \<fromID> is omitted only the element with \<fromID> is listed
  <li> $g \<glob. id>- list info for element with global id (only for ModelP)
  <li> $k \<key>     - list info for element with key

  <li> $d  - up to version 2.3 ONLY: list also user data space
  <li> $b  - print additional info for boundary elements
  <li> $n  - list also neighbours of each element
  <li> $v  - print extended info (verbose mode)
  <li> $l  - list only elements of current level
  <li> $a  - list all elements
   
 \section Keywords
   multigrid, element, list, display, show
*/
/****************************************************************************/

/****************************************************************************/
/** \page  slist  slist - List information on all selected nodes or elements

 \section Description
   This command lists information on selected nodes or elements, calling
   the functions 'ListNodeSelection', 'ListElementSelection'.
   (Listing of selected vectors is not implemented.)

\section Syntax
   'slist [$d] [$b] [$n] [$v]'

  <li>  $d  - up to version 2.3 ONLY: list also user data space
  <li>  $b  - print additional info for boundary nodes/elements
  <li>  $n  - list also neighbours of each node/element
  <li>  $v  - print extended info (verbose mode)
   
 \section Keywords
   multigrid, selection, list, display, show

   SEE ALSO:
   'select'
*/
/****************************************************************************/

/****************************************************************************/
/** \page  rlist rlist - List rule records of element type for refinement

 \section Description
   This command lists the rule record of a refinement rule for an element type,
   if an integer is given or all records for this element type, if all-option is set.

\section Syntax
   'rlist [tri|qua|tet|hex] {[rulenumber] | [$a]}'

  <li> $a  - list all rules for element type
   
 \section Keywords
   multigrid, element, rule, type, list, display, show
*/
/****************************************************************************/

/****************************************************************************/
/** \page   vmlist vmlist - List information on specified vectors and matrices

   This command lists information on specified vectors and matrices, calling
   the functions ListVectorRange() and ListVectorSelection().

\section Syntax
   'vmlist {$s | $i \<fromID> [\<toID>] | $g \<global id> | $k \<key>} [$t \<dt-list>] [$m] [$d] [$a] [$l \<f> \<t>] [$pos 0|1] [$obj 0|1]'

  <ul>
     <li> $s			- list info for the selected vectors  </li>
     <li> $i			- list info for vectors with an ID in the range \<fromID> through \<toID>
       			  if \<fromID> is omitted only the vector with \<fromID> is listed </li>
     <li> $g \<glob. id>- list info for vector with global id (only for ModelP) </li>
     <li> $k \<key>     - list info for vector with key </li>
     <li> $t~\<dt-list>	- list only vectors of specified data types (list of chars, no seperator) </li>

     <li> $m			- list also the associated matrix entries </li>
     <li> $d			- list also the user data </li>
     <li> $skip~0|1	- show skip flags (default 0) </li>
     <li> $a			- list all vectors </li>
     <li> $l \<f> \<t>   - process levels f \<= l \<= t </li>
     <li> $pos~0|1		- show vector positions (default 1) </li>
     <li> $obj~0|1		- show vector object related info (default 1) </li>
  </ul>   

 \section Keywords
   multigrid, vector, matrix, userdata, list, display, show

   Implemented in VMListCommand()
*/
/****************************************************************************/

/****************************************************************************/
/** \page convert convert - Convert a matrix into a sparse format
   
   This command converts a matrix into a sparse format,
   prints it out or svae it to a file.
   
\section Syntax
   `convert \<mat> [$p] [$f \<name>]`
  <ul>
    <li> \<mat> - matrix symbol </li>
    <li> $p - print on shell </li>
  </ul>

  Implemented in ConvertCommand().
*/                                                                          
/****************************************************************************/

/****************************************************************************/
/** \page  in  in - Insert an inner node and vertex

 \section Description
   This command inserts an inner node and the corresponding vertex
   into a multigrid with only level 0, calling the function
   'InsertInnerNode'.

\section Syntax
   'in \<x> \<y> [\<z>]'

  <li> \<x>~\<y>~[\<z>] - specify as much coordinates as the space has dimensions
   
 \section Keywords
   multigrid, insert, create, node, edit
*/
/****************************************************************************/

/****************************************************************************/
/** \page  bn bn - Insert a boundary node and vertex

 \section Description
   This command inserts an boundary node and the corresponding vertex
   into a multigrid with only level 0, calling the function
   'InsertBoubdaryNode'. The options are passed to the domain module function BVP_InsertBndP.

\section Syntax
   'bn...'

   for the domain module std .... is
   '\<Id> \<s> [\<t>]'
  <li> \<Id>        	- insert a boundary node on the patch with \<Id>
  <li> \<s>~[\<t>]    - specify as much patch coordinates as the boundary has dimensions
   
 \section Keywords
   multigrid, insert, create, node, edit
*/
/****************************************************************************/

/****************************************************************************/
/** \page  gn gn - Insertion of a boundary/inner node and vertex from global coordinates

 \section Description
   This command inserts a boundary node if a position can be found matching the
   global point with prescribed or default accuracy. Otherwise an inner node
   is inserted at the global position.
   CAUTION: some domain module maybe does not support insertion of boundary
   nodes from global coordinates!
   
\section Syntax
   'gn \<x> \<y> [\<z>] [$r \<res>]'
   
  <li> \<x>~\<y>~[\<z>]		- global coordinates 
  <li> $r~\<res>				- resolution

 \section Keywords
   multigrid, insert, create, node, edit
*/
/****************************************************************************/

/****************************************************************************/
/** \page  deln  deln - Delete a node and vertex

 \section Description
   This command deletes a node and the corresponding vertex
   of the current multigrid, calling the function 'DeleteNode'.

\section Syntax
   'deln \<Id> | $s'

  <li> \<Id>  - ID of the node to be deleted
  <li> $s    - delete ALL nodes from the selection
   
 \section Keywords
   multigrid, delete, remove, node, edit
*/
/****************************************************************************/

/****************************************************************************/
/** \page  move move - Move a node and vertex

 \section Description
   This command moves a node and the corresponding vertex 
   of the current multigrid to a new position, 
   calling the functions 'MoveInnerNode' and 'MoveBoundaryNode'.

\section Syntax
   'move {\<Id> | $s} {$i \<x> \<y> [\<z>] | $b \<SegId> \<s> [\<t>]}'

  <li> \<Id>                - Id of the node to be moved
  <li> $i~\<x>~\<y>~[\<z>]    - specify as much coordinates as the space has dimensions
  <li> $b~\<Id>~\<s>~[\<t>]   - in the current implementation (domain module dependent)
		 				 boundary nodes can not be moved
   
 \section Keywords
   multigrid, move, node, edit
*/
/****************************************************************************/

/****************************************************************************/
/** \page  ie ie - Insert an element

 \section Description
   This command inserts an element into a multigrid with only level 0, 
   calling the function 'InsertElement'.


\section Syntax
   'ie {\<Id>}+ | $s'

  <li> {\<Id>}+  - specify at least three (2d) or four (3d) corner nodes, the corresponding (unique) element will be created
  <li> $s 		- taking selected nodes 
   
 \section Keywords
   multigrid, insert, create, element, edit
*/
/****************************************************************************/

/****************************************************************************/
/** \page  dele  dele - Delete an element

 \section Description
   This command deletes the specified  element of a multigrid 
   with only level 0, calling the function 'DeleteElement'.

\section Syntax
   'dele \<Id> | $s'

  <li> \<Id> - ID of the element to be deleted
  <li> $s   - delete all elements from the selection
   
 \section Keywords
   multigrid, delete, remove, element, edit
*/
/****************************************************************************/

/****************************************************************************/
/** \page adapt adapt - Adapt the current multigrid

 \section Description
   This command adapts the multigrid according to the refinement marks 
   set in the elements, calling the function AdaptMultiGrid().
   If coarsen marks are set refinements are deleted.

\section Syntax
   'adapt [$g] [$a] [$h] [$x] [$d \<vector plot proc>]'

<ul>
  <li> no~option		- only local refinement </li>
  <li> $g			- copy nonrefined regions to new level  </li>
  <li> $a			- refine all elements </li>
  <li> $d~\<vector~plot~proc>	- 3D only: use vector eval proc for determination of
				regular refinement direction of tetrahedra </li>
  <li> $h			- refine not closed (not implemented yet) </li>
  <li> $x			- use hexahedra (not implemented yet) </li>
</ul>   

 \section Keywords
   multigrid, adapt, mark
*/
/****************************************************************************/


/****************************************************************************/
/** \page  fixcoarsegrid fixcoarsegrid - Marks the end of corse grid generation

 \section Description
   If the coarse grid is build interactively by 'ie', this command 
   terminates this process and calls 'FixCoarseGrid'.

\section Syntax
   'fixcoarsegrid'
   
 \section Keywords
   multigrid, edit, finish
*/
/****************************************************************************/

/****************************************************************************/
/** \page  collapse collapse - Construct coarse grid from surface

 \section Description
   The coarse grid is build from all surface elements.

\section Syntax
   'collapse'
*/
/****************************************************************************/

/****************************************************************************/
/** \page  mark  mark - Mark elements with refinement type 

 \section Description
   This command marks elements with refinement type,
   calling the function MarkForRefinement().

\section Syntax
   'mark [$h | {[\<rule> [\<side>]] [$a | $i \<Id> | $s]} | $c] [$pos \<x y [z]>] [$x \<x>] [$y \<y>] [$z \<z>]'

  <li> \<rule>     - specify a refinement rule ("red" is default)
  <li> \<side>     - has to be specified if the corresponding rule can be applied in several orientations
  <li> $a         - refine all (leave) elements
  <li> $c		  - set all marks to no refinement
  <li> $i \<Id>    - refine the element with \<Id>
  <li> $s         - refine all elements from the current selection
  <li> $h         - show available rules
  <li> $x         - marks elements with corner[0] \< x
  <li> $y         - marks elements with corner[1] \< y
  <li> $z         - marks elements with corner[2] \< z
   
 \section Keywords
   multigrid, refine, adapt, rule, type, mark
   
   SEE ALSO:
   'refine'
*/
/****************************************************************************/

/****************************************************************************/
/** \page  smooth smooth - Invoke hierarchical multigrid smoother

 \section Description
   This command invokes hierarchical multigrid smoother, 
   calling the function 'SmoothMultiGrid'.

\section Syntax
   'smooth \<nIt\> [$b] [$nc]'

  <li>   \<nIt>   - number of iterations
  <li>   $b      - also smooth boundary nodes
  <li>   $nc     - improvement for nonconvex domains
   
 \section Keywords
   multigrid
*/
/****************************************************************************/

/****************************************************************************/
/** \page  smoothgrid  smoothgrid - Resize quadrilaterals and triangles on surface levels according to 
              the element sizes on level l-1

 \section Description


\section Syntax
   'smoothgrid [$limit \<value>] [$reset] [$f \<value>]  [$b] [($ortho0 || $ortho1) \<val0> \<val1> ... \<valN>]'

. $limit~\<value>       - give maximum displacement of the vertices in local coordinates
                      	 of the father element (0 \< value \< 0.5, default: 0.3)
. $reset               - reset elements to default size 
. $f \<value>           - apply smoothgrid for all elements between level \<value> and current level (default: current level)
. $ortho0 \<b0> \<b1> ...- generate 'orthogonal' elements on boundaries \<b0> ... \<bN> (N\<=20)
. $ortho1 \<b0> \<b1> ...- generate 'orthogonal' elements on boundaries \<b0> ... \<bN> (N\<=20) for all sons
                         of the boundary elements on level 0
. $b                   - move only boundary mid nodes
. $spline              - additionaly smooth elements using spline functions
. $spline0             - smooth elements using spline functions only 
   
 \section Keywords
   multigrid, anisotropy
*/
/****************************************************************************/

/****************************************************************************/
/** \page  ordernodes  ordernodes - Order the nodes lexicographically according to the specified directions


 \section Description
   This command orders the nodes according to the user provided dependencies.
   It orders the nodes of the current multigrid, calling the function
   'OrderNodesInGrid' on all levels.
   
   If specified the links are ordered in the corresponding order.

\section Syntax
   'ordernodes ur|ul|dr|dl|ru|rd|lu|ld [$l \<level>] [$L]'

  <li>  $l~\<level> - only on level \<level>
.n   			   u=up, d=down, r=right, l=left
  <li>  $L		   - also order links

  \section Example
	'ordernodes rd $l2'

   Order nodes of grid level 2 lexicographically in horizontal lines from
   left to right and the lines vertical from top down.
   
 \section Keywords
   multigrid, order
*/
/****************************************************************************/

/****************************************************************************/
/** \page  lexorderv lexorderv - Order the vectors lexicographically


 \section Description
   This command orders the vectors lexicographically according to the user
   specified directions.
   It orders the vectors of the current multigrid, calling the function
   'LexOrderVectorsInGrid'.

\section Syntax
   'lexorderv ur|ul|dr|dl|ru|rd|lu|ld [$l \<level>] [$m] [$w s|n] [$s \<|>]'

  <li>  $l~\<level> - only on level \<level>
.n   			   u=up, d=down, r=right, l=left
  <li>  $m		   - also order matrices
  <li>  $w~s|n	   - order skip or nonskip vectors resp.
  <li>  $s \<|>	   - put skip vectors at begin or end of the list resp.
   
 \section Keywords
   multigrid, order
*/
/****************************************************************************/

/****************************************************************************/
/** \page  shellorderv shellorderv - Order the vectors shell by shell


 \section Description
   This command orders the vectors of the current level of the current
   multigrid in shells starting from a seed.

\section Syntax
   'shellorderv f | l | s'

  <li> f - take first vector as seed
  <li> l - take last vector as seed
  <li> s - take selected vector as seed

 \section Keywords
   multigrid, order, shell
*/
/****************************************************************************/

/****************************************************************************/
/** \page  orderv orderv - Order the vectors according to the user provided dependencies


 \section Description
   This command orders the vectors according to the user provided dependencies.
   It orders the vectors of the current multigrid, calling the function
   'OrderVectors'.

\section Syntax
   'orderv $m FFCCLL | FCFCLL $d \<dep-proc> $o \<dep-proc options> $c \<find-cut-proc> [$a]'

  <li> $m FFCCLL | FCFCLL     - possible modes are FFCCLL or FCFCLL
  <li> $d \<dep-proc>          - the ordering algorithm uses this dependency procedure...
  <li> $o \<dep-proc options>  - ...and passes these options to it
  <li> $a                     - order all levels of the current multigrid

   SEE ALSO:
   'lineorderv'
   
 \section Keywords
   multigrid, order, downstream
*/
/****************************************************************************/

/****************************************************************************/
/** \page  revvecorder revvecorder - Revert the vector order


 \section Description
   This command reverts the order of the vector list.
   
\section Syntax
   'revvecorder [$a]'

  <li> $a  - reorder all levels of the current multigrid
   
 \section Keywords
   multigrid, order, reverse
*/
/****************************************************************************/

/****************************************************************************/
/** \page  lineorderv lineorderv - Order the vectors in lines according to the user provided dependencies


 \section Description
   This command orders the vectors in lines according to the user provided dependencies.
   It orders the vectors of the current multigrid, calling the function
   'LineOrderVectors'.

\section Syntax
   'lineorderv $d \<dep-proc> $o \<dep-proc options> $c \<find-cut-proc> [$a] [$v \<level>]'

  <li> $d \<dep-proc>          - the ordering algorithm uses this dependency procedure...
  <li> $o \<dep-proc options>  - ...and passes these options to it
  <li> $c					  - user supplied find cut procedure
  <li> $a                     - order all levels of the current multigrid
  <li> $v~\<level>			  - verbose level

   SEE ALSO:
   'orderv'
   
 \section Keywords
   multigrid, order, downstream, lines
*/
/****************************************************************************/

/****************************************************************************/
/** \page  setindex setindex - Set vector index in ascending order

 \section Description
   'setindex' sets the vector index in ascending order.
   
 \section Keywords
   multigrid, vector, index
*/
/****************************************************************************/

/****************************************************************************/
/** \page  find find - Find (and select) a node (element) from a given position 

 \section Description
   This function finds (and selects) a node (element) from a given position,
   where some tolerance can be specified.
   It finds a node (element) on the current level of the current multigrid, 
   using the functions
   'FindNodeFromPosition', 'FindElementFromPosition'
   'AddNodeToSelection', 'RemoveNodeFromSelection',
   'AddElementToSelection' and 'RemoveElementFromSelection'

\section Syntax
   find \<x> \<y> \<z> {$n \<tol> | $v \<tol> | $e} [$s]

  <li> \<x> \<y> \<z> - specify as much coordinates as the space has dimensions
  <li> $n \<tol>    - find a node maching the position with tolerance \<tol>
  <li> $v \<tol>    - find a vector maching the position with tolerance \<tol>
  <li> $e          - find an element maching the position
  <li> $s          - add the selected node (element) to the selection buffer
               	 (if not specified the node is just listed)
   
 \section Keywords
   multigrid, node, element, position, find, select
*/
/****************************************************************************/

/****************************************************************************/
/** \page   select select - Select a node or element from a given position 

 \section Description
   This function finds (and selects) a node (element) from a given position,
   where some tolerance can be specified.
   It adds/removes nodes/elements from the selection buffer of the current 
   multigrid, using the functions
   'FindNodeFromId', 'FindElementFromId'
   'AddNodeToSelection', 'RemoveNodeFromSelection',
   'AddElementToSelection' and 'RemoveElementFromSelection'

\section Syntax
   'select $i | $c | $n {+|-} \<Id> | $e {+|-} \<Id>'

  <li> $i				- print type and number of list members
  <li> $c               - clear the selection buffer
  <li> $n~{+|-}~\<Id>    - add (+) or remove (-) the node with \<Id> to (from) the selection buffer
  <li> $e~{+|-}~\<Id>    - add (+) or remove (-) the element with \<Id> to (from) the selection buffer
   
 \section Keywords
   multigrid, select, element, node
*/
/****************************************************************************/

/****************************************************************************/
/** \page   extracon extracon - Display number of (and delete) extra connections

 \section Description
   This command displays the number of extra connections 
   (and deletes them if specified).
   Extra connection extend the usual sparsity pattern.

\section Syntax
   'extracon [$d]'

  <li> $c - also check the connections
   
 \section Keywords
   multigrid, matrices, connections, pattern, delete, remove
*/
/****************************************************************************/

/****************************************************************************/
/** \page check check - Check consistency of the data structure

 \section Description
   This command checks consistency of the data structure, using
   the function 'CheckGrid'. Dependent on the options are called inside
   'CheckGrid' one or more of 'CheckGeometry' 'CheckAlgebra', 'CheckLists'
   and 'CheckInterfaces'. Default check is 'CheckGeometry'.

\section Syntax
   'check {$a | $g | $c | $l | $i | $w}* [$n]'

  <li> $a - all possible checks are done
  <li> $g - check the geometric part of data structures (default)
  <li> $c - also check the algebraic part of data structures
  <li> $l - also check the lists of objects and counters of a grid
  <li> $i - also check interfaces (only parallel version)
  <li> $b - also check boundary value problems
  <li> $n - also check the numerical part of data structures
  <li> $w - print a list of all control words of object types with control entries to stdout
   
 \section Keywords
   multigrid, check, consistency, data structure, algebra, counters, interfaces
*/
/****************************************************************************/

/****************************************************************************/
/** \page  quality quality - Calculate minimal and maximal angle of specified elements

 \section Description
   This command calculates the minimal and maximal angle
   between sides of the specified elements
   and lists elements with angle \< or \> given angles.
   It calls the functions 'QualityElement'.

\section Syntax
   'quality $a | $s | {$i \<fromID> [\<toID>]} [$\< \<angle>] [$> \<angle>]'

  <li>   $a          - check angles of all elements in the multigrid
  <li>   $s          - check angles of the selected elements
  <li>   $i          - check angles of elements with an ID in the range \<fromID> through \<toID>
.n                 if \<fromID> is omitted only the element with \<fromID> is listed

  <li>   $\<~\<angle>  - print info for all elements the minangle of which is \< \<angle>
  <li>   $>~\<angle>  - print info for all elements the maxangle of which is > \<angle>

     (angles in degree 0-360)
   
 \section Keywords
   multigrid, element, quality, angles, find
*/
/****************************************************************************/

/****************************************************************************/
/** \page  makegrid  makegrid - Generate grid
   
   2D advancing front generator:
   
 \section Description
   This command generates the grid. First, the command bnodes must be called.
   It reads the environment variables ':gg:RelRasterSize', ':gg:h_global',	
   ':gg:searchconst', ':gg:angle', ':gg:epsi'.

\section Syntax
   'makegrid ${W|w|K|k} [$E] [$h \<val>] [$m \<no>] [$S \<search>] [$A \<angle>] [$d \<subdom>]'

  <li> ${W|w|K|k}	- W resp. K are using the quadtree accellerator, 
  <li> $W~resp.~w	- use the angle criterion,
  <li> $K~resp.~k	- use the edge criterion
  <li> $E 			- grid generator tries to create equilateral triangles (edgelength h)
.n 					default: isosceles triangles (height h)
  <li> $h~\<val> 	- mesh size 
  <li> $m~\<no>		- id of mesh size coefficient function 
  <li> $S~\<search>	- search radius (experts only)
  <li> $A~\<angle>	- try to avoid angle smaller than \<angle>
  <li> $d~\<subdom>	- restrict grid generation to subdomain with id \<subdom>

 \section Example
   'makegrid $k $h 1.0;'
   
   
   3D advancing front generator (by J. Schoeberl):
   
 \section Description
   This command invokes the advancing front tetrahedral grid generator.
   
   'makegrid [$s] [$h \<meshsize>] [$d]'

  <li>  $s				- smooth generated grid
  <li>  $h \<meshsize>	- preferred meshsize (default 1.0)
  <li>  $d				- ?
   
 \section Keywords
   multigrid, generate, create, mesh, net, grid, coarse, advancing front
*/
/****************************************************************************/

/****************************************************************************/
/** \page  status  status - Show status about (parallel) multigrid
   
 \section Description
   This command outputs some statistics about red,green yellow element 
   distribution and some loadbalacing measures for parallel.

\section Syntax
  <li> ${W|w|K|k}	- W resp. K are using the quadtree accellerator, 

 \section Keywords
   multigrid, loadbalancing, mesh, net, grid, adaptive refinement, estimator 
*/
/****************************************************************************/

/****************************************************************************/
/** \page  cadconvert cadconvert - Convert predefined CADgrid

 \section Description
   This command converts a predefined CADgrid to an UG-multigrid.
   The complete boundary descriptions are created automatically.
   Additionally boundary conditions can be chosen from a boundary condition class library.

\section Syntax
   'cadconvert $\<filename> $h\<heapsize>'

   <ul>
     <li> $ \<filename>  - filename = name of CADOutputfile ("*.ans", ANSYS/PREP7-Format) </li>
     <li> $f \<format>   - one of the enroled formats matching with \<problem> </li>
     <li> $h \<heapsize> - the heapsize to be allocated </li>
   </ul>


 \section Example
   'cadconvert $ wuerfel.ans $h 12000;'
   
 \section Keywords
   multigrid, generate, create, mesh, net, grid, coarse, CAD, ANSYS, PREP7
*/
/****************************************************************************/

/****************************************************************************/
/** \page  screensize screensize - Print the size of the monitor screen in pixels

 \section Description
   This command prints the size of the monitor screen in pixels.
   It prints the size in pixels of the screen (if there) on the shell
   and in the variables ':screensize:width', ':screensize:height'

\section Syntax
   'screensize'
   
 \section Keywords
   screen, size, width, height
*/
/****************************************************************************/

/****************************************************************************/
/** \page  openwindow openwindow - Open a new window

 \section Description
   This command opens an ug-window on an outputdevice 
   (this will be the current window then).
   It calls the function 'CreateUGWindow'.

\section Syntax
   'openwindow \<h> \<v> \<dh> \<dv> [$d \<output device>] [$n \<window name>]'

  <li> \<h>~\<v>                - the lower left corner of the plotting region in the 'standardRefSys'
  <li> \<dh>~\<dv>              - the width and height resp. of the plotting region of the window
  <li> $d~\<output~device>     - specify the name of an output device (default: screen)
  <li> $n~\<window~name>       - optionally you can specify the window name
  <li> $r~[0|1]               - if not default device: 0: replace (default), 1: rename existing graphics file (using modification date)
   
   SEE ALSO:
   'closewindow', 'openpicture', 'closepicture'
   
 \section Keywords
   graphics, plot, window, open, create
*/
/****************************************************************************/

/****************************************************************************/
/** \page  closewindow closewindow - Close the current UG-window

 \section Description
   This command closes one (or all) ug-window(s) 
   (including the pictures residing there, of course),
   calling the functions 'DisposeMultiGrid' and 'DisposePicture'.

\section Syntax
   'closewindow [$n \<window name> | $a]'

  <li> $n~\<window~name>  - close the window with the specified name
.n      	             (default: the current window)
  <li> $a                - close all open windows
   
 \section Keywords
   graphics, plot, window, close, remove
   
   SEE ALSO:
   'openwindow', 'openpicture', 'closepicture'
*/
/****************************************************************************/

/****************************************************************************/
/** \page  setcurrwindow setcurrwindow - Set the current window

 \section Description
   This command makes a window the current window.	
   It calls the function 'GetUGWindow'.

\section Syntax
   'setcurrwindow \<window name>'

  <li> \<window~name> - name of a window
   
 \section Keywords
   graphics, plot, window, current, active

   SEE ALSO:
   'openwindow'
*/
/****************************************************************************/

/****************************************************************************/
/** \page  openpicture openpicture - Open a new picture

 \section Description
   This command opens a picture on a window 
   (these will be the current window and picture resp. then).
   It calls the function 'CreatePicture'.

\section Syntax
   'openpicture [$w \<window name>] [$s \<h> \<v> \<dh> \<dv>] [$n \<picture name>]'

  <li> $w~\<window~name>       - open a picture on this window (default: current window)
  <li> $s~\<h>~\<v>~\<dh>~\<dv>   - specify the location and size in the 'standardRefSys' with
							the origin located in the lower left corner of the parent window
.n                       	(default: picture size = parent window size)

  <li> $n~\<picture~name>      - optionally you can specify the picture name
   
 \section Keywords
   graphics, plot, window, picture, open, create
   
   SEE ALSO:
   'openwindow', 'closepicture'
*/
/****************************************************************************/

/****************************************************************************/
/** \page  openppic  openppic - Open a new window with placed pictures

 \section Description
   ???

\section Syntax
   'openppic ??? [$R [0|1]]'

  <li> $R~[0|1]               - if not default device: 0: replace (default), 1: rename existing graphics file (using modification date)
   
 \section Keywords
   graphics, plot, window, picture, open, create
   
   SEE ALSO:
   'openwindow', 'closepicture'
*/
/****************************************************************************/

/****************************************************************************/
/** \page  closepicture closepicture - Close a picture

 \section Description
   This command closes one (or all) picture(s) on a window.
   It calls the function 'DeletePicture'.

\section Syntax
   'closepicture [$a | {$w \<window name> {\<picture name> | $a}}]'

  <li> $w~\<window~name>        - close a picture of this window 
								(default: the current picture)
  <li> $a                      - close all pictures of the current window
  <li> {\<picture~name>~|~$a}   - close the picture with the specified name or all pictures of that window
   
 \section Keywords
   graphics, plot, window, picture, close, remove
   
   SEE ALSO:
   'openwindow', 'openpicture'
*/
/****************************************************************************/

/****************************************************************************/
/** \page  setcurrpicture setcurrpicture - Make a picture the current picture

 \section Description
   This command makes a picture the current picture.

\section Syntax
   'setcurrpicture \<picture name> [$w \<window name>]'

  <li> \<picture~name>         - name of the picture
  <li> $w~\<window~name>       - picture resides in this window (default: current window)
   
 \section Keywords
   graphics, plot, window, picture, current, active
   
   SEE ALSO:
   'openwindow', 'openpicture'
*/
/****************************************************************************/

/****************************************************************************/
/** \page  picwin picwin - Move the current picture to a new window

 \section Description
   This command moves the current picture to a newly created window. All
   settings will be kept.

\section Syntax
   'picwin'
   
 \section Keywords
   graphics, plot, window, picture, move
   
   SEE ALSO:
   'openwindow', 'openpicture'
*/
/****************************************************************************/

/****************************************************************************/
/** \page  setview setview - Specifies the view on the object

 \section Description
   This command specifies or changes the observer view of the object 
   of the current picture.
   It calls the function SetView().

\section Syntax

 \subsection  In 2D
\verbatim
setview [$i] [$t \<x> \<y>] [$x  \<x> \<y>]
\endverbatim

 \subsection  In 3D
\verbatim
setview [$i] [$o \<x> \<y> \<z> $t \<x> \<y> \<z>] [$x \<x> \<y> [\<z>]] [$p \< | =]
              {$C | $R | {$P \<x> \<y> \<z> $N \<x> \<y> \<z>}}
\endverbatim

.n                         all coordinates have to be given in physical coordinates

  <li>  $i                     - return to default settings first
  <li>  $o \<x> \<y> \<z>         - 3D objects ONLY: specify the observer stand
  <li>  $p \< | =               - 3D objects ONLY: choose central (\<) or parallel (=) perspective
  <li>  $t \<x> \<y> [\<z>]       - specify the target point in the viewplane
.n	                         (NB: the viewplane is then defined to be normal to the line observer-target)

  <li>  $x \<x> \<y> [\<z>]       - define an x-axis in the viewplane (which will be to the right in the picture)
   
   
   Some 3D plot objects allow to define a cut. It can be set and manipulated using the
   following options:~

  <li>  $C                     - define a default cut facing to x-direction and cutting the objects midpoint
  <li>  $P~\<x>~\<y>~\<z>         - a point on the cut plane
  <li>  $N~\<x>~\<y>~\<z>         - the normal of the cut plane
  <li>  $R					   - remove cut    
   
   For first definition of cut specify either C-option or both P- and N-option.
    
 \section Keywords
   graphics, plot, window, picture, view, cutting plane
   
   SEE ALSO:
   'vdisplay'
*/
/****************************************************************************/

/****************************************************************************/
/** \page  vdisplay vdisplay - Display view of current picture

 \section Description
   This command displays view of current picture.
   It calls the function 'DisplayViewOfDisplayedObject'.

\section Syntax
   'vdisplay [$s]'
   
  <li>  $s		- print settings in 'setview'-command style. This is especially
				useful after interactive zoom and pan. Pasting the output into
				a script file will reproduce the current view of the picture.
   
 \section Keywords
   graphics, plot, window, picture, view, cutting plane, display, show, print

   SEE ALSO:
   'setview'
*/
/****************************************************************************/

/****************************************************************************/
/** \page  cpview cpview - Copy view settings of current picture to other ones

 \section Description
   This command copies the view settings of current picture to all other pictures of
   the same window (default) or all windows provided that they belong to the
   same MG and they have the same dimension.

\section Syntax
   'cpview [$a] [$c]'
  <li> a - set views of all pictures in all windows
  <li> c - set also cut (if defined for plot object)
   
 \section Keywords
   graphics, plot, window, picture, view, cutting plane, copy

   SEE ALSO:
   'setview', 'arrowtool'
*/
/****************************************************************************/

/****************************************************************************/
/** \page  walk walk - Let the observer walk relative to the viewRefSys

 \section Description
   This command lets the observer walk relative to the 'viewRefSys'
   in the current picture. It calls the function 'walk'.

\section Syntax
   'walk \<x> \<y> [\<z>]'

  <li>  \<x>~\<y>~[\<z>] - coordinates
   
 \section Keywords
   graphics, plot, window, picture, view, observer, move

   SEE ALSO:
   'arrowtool'
*/
/****************************************************************************/

/****************************************************************************/
/** \page  walkaround walkaround - Let the observer walk on a sphere around the target point

 \section Description
   This command lets the observer walk on a sphere around the target point.
   It calls the function 'RunAroundTargetPoint'.

\section Syntax
   'walkaround \<viewplane angle> \<rotation angle>'

  <li> \<viewplane~angle>      - this angle runs in the view plane math pos from the x-axis and defines
.n                        - together with the target-observer direction a plane

  <li> \<rotation~angle>       - the observer will be rotated around the target point in the above plane

   (angles in degree 0 - 360)
   
 \section Keywords
   graphics, plot, window, picture, view, observer, move, rotate

   SEE ALSO:
   'arrowtool'
*/
/****************************************************************************/


/****************************************************************************/
/** \page zoom zoom - Zoom the current picture

 \section Description
   This command zooms the current picture.
   the zoom factor is always relative to the current setting.
   It calls the function 'Zoom'.

\section Syntax
   'zoom \<factor>'

  <li> \<factor>  - values \< 1 magnify picture 
   
 \section Keywords
   graphics, plot, window, picture, view, zoom, magnify

   SEE ALSO:
   'arrowtool'
*/
/****************************************************************************/

/****************************************************************************/
/** \page  drag drag - Drag the projection plane of the current picture

 \section Description
   This command drags the projection plane of the current picture relative 
   to its x-axis.
   It calls the function 'DragProjectionPlane'.

\section Syntax
   'drag \<dx> \<dy>'

  <li> \<dx>~\<dy>  - displacement vector 
   
 \section Keywords
   graphics, plot, window, picture, view, observer, pan, move

   SEE ALSO:
   'arrowtool'
*/
/****************************************************************************/

/****************************************************************************/
/** \page  rotate rotate - Rotate the projection plane of the current picture

 \section Description
   This command rotates the projection plane of the current picture around 
   the target point.
   It calls the function 'RotateProjectionPlane'.

\section Syntax
   'rotate \<angle>'

  <li> \<angle>  - \<angle> runs in the view plane math pos from the x-axis
   
 \section Keywords
   graphics, plot, window, picture, view, observer, rotate

   SEE ALSO:
   'arrowtool'
*/
/****************************************************************************/

/****************************************************************************/
/** \page  linefac linefac - Set factor to zoom line width

 \section Description
   This command sets factor to zoom line width (default 1).
   
\section Syntax
   'linefac \<factor>'
   
 \section Keywords
   graphics, plot, window, picture, view, linewidth
*/
/****************************************************************************/

/****************************************************************************/
/** \page  setplotobject setplotobject - Set plotting specification 

 \section Description
   This command specifies the object which will be plotted in the current
   picture and associates the current multigrid with it (if not done yet).
   It calls the function 'SpecifyPlotObjOfViewedObject'.

\section Syntax
   'setplotobject [\<object type name>] [$a] ... '

  <li>   \<object~type~name>   - possible are:
.n								2 and 3D:~
.n								'Matrix'

.n								2 and 3D (with possibly different options):~
.n								'Grid',			for help see 'Grid2D', 'Grid3D'
.n								'EScalar',		for help see 'EScalar2D', 'EScalar3D'
.n								'EVector'		for help see 'EVector2D', 'EVector3D'
.n								'VecMat'		for help see 'VecMat2D', 'VecMat3D'

.n								2D only:~
.n								'line'

  <li>   $a					  - (for 3d plot objects) moves the observer to a place outside
		                    the bounding sphere of the plot object  


   The remaining options depend on which object you specified.
   See the help for one of the abobe plotobjects for further help.

 \section Example
\verbatim
openpicture $n p0 $s 5 5  300 300;
setplotobject Grid $b 1 $n 0 $e 0 $c 1 $w a;
setview;
zoom 0.75;

openpicture $n p1 $s 5 310 300 300;
setplotobject EScalar $e u_sol $d 1;
setview;
zoom 0.75;

openpicture $n p2 $s 5 615 300 300;
setplotobject EScalar $e v_sol $d 1;
\endverbatim
   
 \section Keywords
   graphics, plot, window, picture, view, plotobject
   
   SEE ALSO:
   Matrix, Grid, EScalar, EVector, VecMat, line
*/

/****************************************************************************/
/** \page  polist polist - Print the specifications of the object

 \section Description
   This command prints the specifications of the object defined in the 
   current picture. It calls the function 'DisplayObject'.

\section Syntax
   'polist'
   
 \section Keywords
   graphics, plot, window, picture, plotobject, list, show, print, display
   
   SEE ALSO:
   'setplotobject'
*/
/****************************************************************************/

/****************************************************************************/
/** \page  setcurrmg setcurrmg - Change the current multigrid

 \section Description
   This command sets the current multigrid.

\section Syntax
   'setcurrmg \<mgname>'

  <li> \<mgname>  - name of the open multigrid which will be made the current one
   
 \section Keywords
   multigrid, current, active

   SEE ALSO:
   'open', 'new'
*/
/****************************************************************************/

/****************************************************************************/
/** \page  updateDoc updateDoc - Reset the windows and pictures of the current multigrid to invalid

 \section Description
   This command runs 'InvalidatePicturesOfMG' and 
   'InvalidateUgWindowsOfMG'.
   If the refresh state is on, the pictures will be replotted.

\section Syntax
   'updateDoc'
   
 \section Keywords
   graphics, plot, window, picture, plotobject, invalidate
*/
/****************************************************************************/

/****************************************************************************/
/** \page  setpalette setpalette - Switch palette of default device

 \section Description
   This command switches the palette of the default device.

\section Syntax
   'setpalette c|bw|g [$d \<device>]'
  <li> $d~\<device>     - specify the name of an output device (default: screen)
   
 \section Keywords
   graphics, plot, window, picture, device
*/
/****************************************************************************/

/****************************************************************************/
/** \page  clear clear - Assign a value to a symbolic vector

 \section Description
   This function sets the values of a grid function specified by a vec data descriptor.
   The data descriptor is created if it does not exist yet.
   It clears or assigns a constant value.

\section Syntax
   'clear \<symbol name> [$a] [$u] [$v \<value>] [$x] [$y] [$z]'

  <li> $a         - from level 0 through current level (default: current level only)
  <li> $s         - do not change skip (Dirichlet) values
  <li> $v~\<value> - assign this value (instead of 0.0)
   
 \section Keywords
   multigrid, numerics, userdata, vecdata, clear, set

   SEE ALSO:
   'cv', 'cm', 'copy'
*/
/****************************************************************************/

/****************************************************************************/
/** \page  makevdsub makevdsub - Make a sub descriptor for a vector descriptor

 \section Description
   This function makes a sub descriptor for a vector descriptor.

\section Syntax
   'makevdsub \<vd> $sub \<vt> \<sub>'

  <li> \<vd>				- existing descriptor
  <li> $sub~\<vt>~\<sub>	- template and name of sub of this template
   
 \section Keywords
   multigrid, numerics, userdata, vecdata, descriptor
*/
/****************************************************************************/

/****************************************************************************/
/** \page  mflops mflops - Floating point speed measuring

 \section Description
   This function tests the performance of the UG specific blas routines.

\section Syntax
   'mflops $x \<vec> [$y \<tmp>] [$A \<mat>] [$l \<loop>]'

  <li> $x~\<vec>   - vector
  <li> $y~\<tmp>   - second vector
  <li> $A~\<mat>   - matrix
  <li> $l~\<loop>  - loop number

   REMARK:
   Due to the inaccuracy of the most UNIX clock systems take a huge loop number
   to get an good average.
*/
/****************************************************************************/

/****************************************************************************/
/** \page  rand rand - Assign a value to a symbolic vector

 \section Description
   This function sets the random values of a grid function specified by a vec data descriptor.
   The data descriptor is created if it does not exist yet.

\section Syntax
   'rand \<symbol name> [$a] [$s] [$f \<value>] [$t \<value>]'

  <li> $a         - from level 0 through current level (default: current level only)
  <li> $s         - set skip (Dirichlet) values to zero, default is no skip
  <li> $f~\<value> - low bound of random range, default is 0
  <li> $t~\<value> - upper bound of random range, default is 1
   
 \section Keywords
   multigrid, numerics, userdata, vecdata, clear, set

   SEE ALSO:
   'cv', 'cm', 'copy'
*/
/****************************************************************************/

/****************************************************************************/
/** \page  copy copy - Copy from one vector symbol to another one

 \section Description
   This command copies from one vector symbol to another one.
   The data descriptor is created if it does not exist yet.

\section Syntax
   'copy $f \<from vec sym> $t \<to vec sym> [$a]'

  <li> $f~\<from~vec~sym>      - from vector symbol
  <li> $t~\<from~vec~sym>      - to vector symbol
  <li> $a                     - all levels

 \section Example
   'copy $f sol $t old;'
   
 \section Keywords
   multigrid, numerics, userdata, vecdata, copy, set

   SEE ALSO:
   'cv', 'cm', 'clear'
*/
/****************************************************************************/

/****************************************************************************/
/** \page add add - Add two vector symbols

 \section Description
   This command adds two vectors (x = x + y).

\section Syntax
   'add $x \<vec sym> $y \<vec sym> [$a]'

  <li> $x~\<vec~sym>      - vector symbol 
  <li> $y~\<vec~sym>      - vector symbol
  <li> $a                - all levels

 \section Example
   'add $x sol $y old;'
   
 \section Keywords
   multigrid, numerics, userdata, vecdata, copy, set

   SEE ALSO:
   'cv', 'cm', 'clear', 'sub'
*/
/****************************************************************************/

/****************************************************************************/
/** \page  sub sub - Subtract two vector symbols

 \section Description
   This command subtracts two vectors (x = x - y).

\section Syntax
   'sub $x \<vec sym> $y \<vec sym> [$a]'

  <li> $x~\<vec~sym>      - vector symbol 
  <li> $y~\<vec~sym>      - vector symbol
  <li> $a                - all levels

 \section Example
   'sub $x sol $y old;'
   
 \section Keywords
   multigrid, numerics, userdata, vecdata, copy, set

   SEE ALSO:
   'cv', 'cm', 'clear', 'add'
*/
/****************************************************************************/

/****************************************************************************/
/** \page  homotopy homotopy - Convex combination of two vector symbols

 \section Description

   This command sets 'x := (1-v)*x + v*y'.

\section Syntax
   'homotopy $v \<val> $x \<x vec sym> $y \<y vec sym> [$a]'

  <li> $v~\<val>               - value
  <li> $x~\<x~vec~sym>         - vector symbol
  <li> $y~\<y~vec~sym>         - vector symbol
  <li> $a                     - all levels

 \section Example
   'homotopy $v 0.5 $x sol $y old;'
   
 \section Keywords
   multigrid, numerics, userdata, vecdata, weighted sum, interpolate

   SEE ALSO:
   'cv', 'cm', 'copy', 'clear'
*/
/****************************************************************************/

/****************************************************************************/
/** \page  interpolate interpolate - Interpolate a vector symbol to new vectors on the current level

 \section Description
   The data descriptor is created if it does not exist yet.

\section Syntax
   'interpolate \<vec sym>'

. \<vec~sym>  - vector symbol to be interpolated

 \section Example
   'interpolate sol;'
   
 \section Keywords
   multigrid, numerics, userdata, vecdata, interpolate, prolongate

   SEE ALSO:
   'clear', 'cv'
*/
/****************************************************************************/

/****************************************************************************/
/** \page  reinit reinit - Reinitialize a boundary value problem

 \section Description
   This command reinitializes the problem with the user defined reinit of the 
   problem. All arguments are passed to the reinit function

\section Syntax
   'reinit [$b \<boundary value problem>] ...'

  <li> $b~\<boundary~value~problem> - problem to initialize
							     (default is the problem of the current mg)
   
 \section Keywords
   multigrid, boundary value problem, configure, change
*/
/****************************************************************************/

/****************************************************************************/
/** \page  delformat delformat - Delete a previously enroled format

 \section Description
   This command deletes a previously enroled format.

\section Syntax
   'delformat \<format name>'

  <li> \<format~name> - name of the fomat
   
 \section Keywords
   storage, format
*/
/****************************************************************************/

/****************************************************************************/
/** \page setpf setpf -  Change current settings of the data
					listing functions of a format

 \section Description

   For a format previously enroled by use of the 'newformat' command the 'setpf'
	command specifies the symbols that are displayed when 'vmlist' is called 

 \section Syntax
	setpf \<format_name> [$V{0 | {+|-} {\<vecsym_name>}+}]+ [$M{0 | {+|-} {\<matsym_name>}+}]+
	
	'$d' (list vector data) or '$d $m' (list vector and matrix data).
	'0' clears the list of symbols, '+' adds further symbols, and '-'
	removes symbols from that list.
	
	EXAMPLE:
\verbatim
	newformat ns $V n3: vt 5 $M n3xn3: mt 2;
	
	open grid $f ns $h 1000000;
	
	clear sol;		# creates sol vec data desc from vt template
	
	# suppose rhs, MAT, LU data descriptors have been created by the initialization of
	# the discretization and solver
	
	# print sol, rhs vector data and MAT, LU matrix data of vector with index 10
	setpf ns $V0 $M0 $V+ sol rhs $M+ MAT LU;
	vmlist $i 10 $m $d;
	
	# print sol vector data and MAT matrix data of vector with index 12
	setpf ns $V- rhs $M- LU;
	vmlist $i 12 $m $d;
\endverbatim
   
 \section Keywords
   multigrid, numerics, userdata, vecdata, matdata, print, show, display
	
	SEE ALSO:
	'showpf'
*/
/****************************************************************************/

/****************************************************************************/
/** \page showpf showpf - Display current settings of data
					listing functions
	
	DESCRIPTION:
	This command shows which user data will bbe listed by vml $d $m...
	
 \section Syntax
	'showpf'
   
  \section Keywords
    multigrid, numerics, userdata, vecdata, matdata, print, show, display
	
	SEE ALSO:
	setpf
*/
/****************************************************************************/

/****************************************************************************/
/** \page   npexecute npexecute - Execute a NumProc
 *
 * This command executes a NumProc.
 * It calls the function 'ExecuteNumProc'.

 \section Syntax
   'npexecute [\<num proc name>] \<argument list to be passed>'

  <li> \<num~proc~name> - name of an existing NumProc
   
 \section Keywords
   multigrid, numerics, userdata, vecdata, matdata, numproc, execute

   * \sa numerics, NUM_PROC
*/
/****************************************************************************/

/****************************************************************************/
/** \page  npdisplay npdisplay - Display a NumProc

 \section Description
   This command displays a NumProc.
   It calls the function 'DisplayNumProc'.

 \section Syntax
   'npdisplay [\<num proc name>] [$c [\<class>] | $a]'

  <li> \<num~proc~name> - name of an existing NumProc (default is the current NumProc)
  <li> $c~[\<class>]    - list all num procs of \<class> or list classes if \<class> omitted
  <li> $a              - list all num procs
   
 \section Keywords
   multigrid, numerics, userdata, vecdata, matdata, numproc, display, show, print

   SEE ALSO:
   'npcreate', 'npexecute'
*/
/****************************************************************************/

/****************************************************************************/
/** \page  npcreate npcreate - Create a NumProc

 \section Description
   This command creates a NumProc for the current multigrid with a given constructor.
   It calls the function CreateNumProc().

 \section Syntax
   'npcreate \<num proc name> $c \<constructor>'

  <li> \<num~proc~name> 		- name of the new NumProc
  <li> $c~\<num~proc~type>	- name of an existing constructor
   
 \section Keywords
   multigrid, numerics, userdata, vecdata, matdata, numproc, create, install

   SEE ALSO:
   'npdisplay', 'npexecute', 'NUM_PROC'
*/
/****************************************************************************/

/****************************************************************************/
/** \page  npinit npinit - Inizialize a NumProc

 \section Description
   This command inizializes a NumProc.
   It calls the function 'SetNumProc'.

 \section Syntax
   'npinit \<argument list to be passed>'
   
 \section Keywords
   multigrid, numerics, userdata, vecdata, matdata, numproc, initialize, parameters, configure

   SEE ALSO:
   'npcreate', 'npdisplay', 'numerics', 'NUM_PROC'
*/
/****************************************************************************/

/****************************************************************************/
/** \page  scnp  scnp - Make a NumProc the current NumProc

 \section Description
   This command makes a NumProc the current NumProc.
   It sets current num proc.
   It calls the function 'GetNumProcFromName'.

 \section Syntax
   'scnp \<num proc name>'

. \<num~proc~name> - name of an existing NumProc
   
 \section Keywords
   multigrid, numerics, userdata, vecdata, matdata, numproc, active, current

   SEE ALSO:
   'npcreate', 'npdisplay', 'numerics', 'NUM_PROC'
*/
/****************************************************************************/

/****************************************************************************/
/** \page  createvector createvector - Construct vector descriptor

 \section Description
   This function creates vector descriptors using templates defined
   in the format.

 \section Syntax
   'createvector \<v1> [\<v2> ...] [$t \<template>] [$m \<name>]'

  <li> v1 		- vector name
  <li> template - template name (default is the first vector template)
  <li> name 	- multigrid name (default is the current multigrid)
   
 \section Keywords
   multigrid, numerics, userdata, vecdata, create

   SEE ALS0:
   'newformat', 'creatematrix'
*/
/****************************************************************************/

/****************************************************************************/
/** \page  createMatrix creatematrix - Construct matrix descriptor

 \section Description
   This function creates matrix descriptors using templates defined
   in the format.

 \section Syntax
   'creatematrix \<M1> [\<M2> ...] [$t \<template>] [$m \<name>]'

  <li> M1 		- matrix name
  <li> template - template name (default is the first matrix template)
  <li> name 	- multigrid name (default is the current multigrid)
   
 \section Keywords
   multigrid, numerics, userdata, matdata, create

   SEE ALS0:
   'newformat', 'createvector'
*/
/****************************************************************************/

/****************************************************************************/
/** \page  freematrix freematrix - Free matrix

 \section Description
   This function frees matrix descriptors.

 \section Syntax
   'freematrix \<M1> [\<M2> ...] [$m \<name>]'

  <li> M1 		- matrix name
  <li> name 	- multigrid name (default is the current multigrid)
   
 \section Keywords
   multigrid, numerics, userdata, matdata, create

   SEE ALS0:
   'newformat', 'creatematrix'
*/
/****************************************************************************/

/****************************************************************************/
/** \page  symlist symlist - List contents of vector and matrix symbols

 \section Description
   This command lists the contents of vector and matrix data descriptors of the
   current multigrid

 \section Syntax
   'symlist {$V [\<vd>] | $M [\<md>]  [$alloc] [$scal]}'

	Specify either option V or M with or without:~
  <li> \<vd> - name of a vec data desc, if omitted ALL vec data descs of the current
			multigrid are listed
  <li> \<md> - name of a mat data desc, if omitted ALL mat data descs of the current
			multigrid are listed
			
  <li> \<alloc> - is descriptor allocated and/or locked
  <li> \<scal> - is descriptor scalar or not
   
 \section Keywords
   multigrid, numerics, userdata, vecdata, matdata, list, show, display, print

   SEE ALSO:
   'newformat', 'createvector', 'creatematrix'
*/
/****************************************************************************/

/****************************************************************************/
/** \page  setkey setkey - Associate a command key with a ug command 

 \section Description
   This command associates a command key with a ug command.
   It calls the function 'SetCmdKey'.

 \section Syntax
   'setkey $\<command char> [$c \<comment text>] [$-] $"\<command sequence>"*'

  <li> $k~\<command~char>      - specifiy a single character which will be the command key
  <li> $c~\<coment~text>       - will be displayed by keylist rather than command(s)
  <li> $-                     - keylist prints a hor bar befor this key
  <li> $"\<command~sequence>"  - give an arbitrary sequence of statements which is to be executed when the command key is pressed

 \section Example
   'setkey $r $"mark $a" $"refine";'

   Typing \<alt> and then 'r' refines all elements on a UNIX system,
   \<cmd>+\<r> on a Macintosh.
   
   NOTICE:
   When the command sequence contains a \@ character, the following token is interpreted
   as string variable and expanded as usual instantaneously when the command key is created.
   If the sequence contains a ? instead of the \@, the string variable will be expanded with its current
   contents at execution time of the command sequence.
   
   The special character ? is limited however to the 'setkey' command.
   
 \section Keywords
   shortcut, hotkey, create, define

   SEE ALSO:
   'setkey', 'delkey'
*/
/****************************************************************************/

/****************************************************************************/
/** \page  delkey delkey - Delete an existing command key

 \section Description
   This command deletes an existing command key.
   It calls the function 'DelCmdKey'.

 \section Syntax
   'delkey $all | $\<command char>'

  <li> $all                   - delete all command keys allocated before
  <li> $\<command~char>        - delete only the command key associated with \<command char>
   
 \section Keywords
   shortcut, hotkey, remove, undefine

   SEE ALSO:
   'setkey', 'delkey'
*/
/****************************************************************************/

/****************************************************************************/
/** \page  keylist keylist - List all existing command keys

 \section Description
   This command lists all existing command keys.
   It calls the function 'ListCmdKeys'.

 \section Syntax
   'keylist [$l]'

  <li> $l - show commands and comment (iff)
   
 \section Keywords
   shortcut, hotkey, list, show, display, print

   SEE ALSO:
   'setkey', 'delkey'
*/
/****************************************************************************/

/****************************************************************************/
/** \page  refreshon refreshon - Sets the refresh state on

 \section Description
   This command sets the refresh state on: The pictures on the screen 
   device will be updated instantaneously.

 \section Syntax
   'refreshon [$b [factor]]'
   
  <li> $b - use bullet plotter for refresh

 \section Keywords
   graphics, plot, window, picture, plotobject, invalid, update

    SEE ALSO:
	'refreshoff', 'InvalidatePicturesOfMG', 'InvalidateUgWindowsOfMG'
*/
/****************************************************************************/

/****************************************************************************/
/** \page  refreshoff refreshoff - Sets the refresh state off

 \section Description
   This command sets the refresh state off.

 \section Syntax
   'refreshoff'
   
 \section Keywords
   graphics, plot, window, picture, plotobject, invalid, update

   SEE ALSO:
   'refreshon'
*/
/****************************************************************************/

/****************************************************************************/
/** \page  resetCEstat resetCEstat - Reset counters of control entry usage

 \section Description
   This command resets the counters of control entry usage.

 \section Syntax
   'resetCEstat'
   
 \section Keywords
   control entries

   SEE ALSO:
   'printCEstat'
*/
/****************************************************************************/

/****************************************************************************/
/** \page  printCEstat printCEstat - Print counters of control entry usage

 \section Description
   This command prints the counters of control entry usage.

 \section Syntax
   'printCEstat'
   
 \section Keywords
   control entries

   SEE ALSO:
   'resetCEstat'
*/
/****************************************************************************/

/****************************************************************************/
/** \page  heapstat heapstat - List information about heap of current multigrid

 \section Description
   This command lists information on the heap of the current multigrid, calling
   the function 'HeapStat'.

 \section Syntax
   'heapstat'
   
 \section Keywords
   heap, multigrid, freelists 
*/
/****************************************************************************/

/****************************************************************************/
/** \page  getheapused getheapused - Get size of used heap of current multigrid

 \section Description
   This command gets the size of used heap of the current multigrid and puts
   the result in the environment variable :HEAPUSED.

 \section Syntax
   'getheapused'
   
 \section Keywords
   heap, multigrid, freelists, memory, used, get, free 
*/
/****************************************************************************/

/****************************************************************************/
/** \page lb  lb - A simple load balancing front end to chaco
   			based on the clustering technique

 \section Description
   The lb command performs load balancing  <li> If not run on a parallel machine
   it will do nothing  <li> If run on a parallel machine it will try to use Chaco,
   provided the CHACO option for ug was turned on  <li> If Chaco is not available
   a simple RCB load balancing will be employed  <li> In the latter case some of
   the optional arguments will be ignored.
   
 \section Syntax
   'lb  [\<strategy>] [$c \<minlevel>] [$d \<depth>] [$f \<maxlevel>] [$e \<minelem>]'

  <li> \<strategy>		- load balancing strategy 
  <li> $c \<minlevel>	- start load balancing at this level
  <li> $d \<depth>		- depth of clusters
  <li> $f \<maxlevel>	- no load balancing above this level
  <li> $e \<minelem>		- minimal number of elements on each processor

 \section Keywords
   parallel, processors, load balance, chaco
*/
/****************************************************************************/

/****************************************************************************/
/** \page lbs lbs - Simple or special load balancing functionality

 \section Description
   ...
   
 \section Syntax
   'lbs ...'

 \section Keywords
   parallel, processors, check, load balancing
*/
/****************************************************************************/

/****************************************************************************/
/** \page context  context - Manipulate current processor context

 \section Description
   This command adds/removes processors from the current context.
   
 \section Syntax
   'context \<processor\> | $a | $e'
   
  <li> \<processor>		- processor id
  <li> $a				- add all processors
  <li> $e				- remove all processors (empty context)
   
 \section Keywords
   parallel, processors, display, show, print, DDD, configure
*/
/****************************************************************************/

/****************************************************************************/
/** \page pstat  pstat - Gives information about parallel data structures

 \section Description
   ...
   
 \section Syntax
   'pstat ...'

   first argument will be passed to DDD
   
 \section Keywords
   parallel, processors, display, show, print, DDD, status, interfaces
*/
/****************************************************************************/

/****************************************************************************/
/** \page
   dlb_eval - gives information current load balancing situation

 \section Description
   information on the current load balancing situation of MultiGrid
   
 \section Syntax
   'dlb_eval $v \<0-n>'

   
 \section Keywords
   load balancing, status, load, interfaces, partition graph
*/
/****************************************************************************/

/****************************************************************************/
/** \page
   lb4 - load balancer using different (high level) strategies
   			based on the clustering technique

 \section Description
   ...
   
 \section Syntax
   'lb4 ...'
   
 \section Keywords
   parallel, processors, load balance, chaco
*/
/****************************************************************************/

/****************************************************************************/
/** \page  debug debug - Set or display debug level for ug kernel subsystem

 \section Description
   This command sets the debug level for a ug kernel subsystem.
   
 \section Syntax
   'debug $\<module> [$\<level>]'

  <li>  $\<module>	- module can be one of
.n					init
.n					dddif
.n					dev
.n					dom
.n					gm
.n					graph
.n					low
.n					machines
.n					np
.n					ui
.n					time
.n                  pclib
.n                  appl
  <li>  $\<level>	- assign this level (if omitted display current level for the
					specified module)
   
 \section Keywords
   debug, configure, set, display, show, print
*/
/****************************************************************************/

/****************************************************************************/
/** \page  trace trace - Trace a module

 \section Description
   This command sets the trace level of modules (blas only up to now).

 \section Syntax
   'trace [$blas \<n>]'
  <li>  $blas~\<n>	- 0: off, 1: show parameters (default),
					2: parameters and vector contents (blas level 1)
   
 \section Keywords
   debug, trace, ugblas
*/
/****************************************************************************/

/****************************************************************************/
/** \page  reperr reperr - Prints the error stack

 \section Description
   This command prints the error stack which is created when functios use
   the REP_ERR_RETURN macro. The stack is cleared before each call of a ug-command.
   
   File and line of the returning functions are printed.

 \section Syntax
   'reperr'
   
 \section Keywords
   debug, stack, error, display, show, print
*/
/****************************************************************************/

/****************************************************************************/
/** \page   timing timing - Prints time history

 \section Description
   File, line and times are printed.

 \section Syntax
   'timing'
   
 \section Keywords
   debug
*/
/****************************************************************************/

/****************************************************************************/
/** \page   showconfig showconfig - Show the main configuration settings of this ug-program

 \section Description
   This command shows the main configuration options having been active
   when this ug was compiled.
   
 \section Syntax
   'showconfig'
   
 \section Keywords
   debug, check, configure, show, display, print
*/
/****************************************************************************/

/****************************************************************************/
/** \page   array array - Family of ug-commands to handle n-dimensional arrays of doubles

 \section Description
   Each array is a struct in the directory '/Array'. Besides some
   administrational information it contains an ordinary, n-dimensional array
   of doubles as a 'double[n_1][n_2]...[n_k]' definition in C would allocate.
   The maximum number 'k' of dimensions is restricted to 'AR_NVAR_MAX'.

   The provided commands to work with array are the following. The name of
   each command conists of the 2 first letters of its action (e.g. 'sa' for
   'save') and the postfix 'ar' for 'array'.

   CONSTRUCTION and DESTRUCTION:
  <li> crar~$n~\<name>~{$n_i}+ 			 - create array of specified size
  <li> dear~$n~\<name> 		  			 - delete array

   ACCESS to values:
  <li> wrar~$n~\<name>~{$n_i}+~$v~\<value> - write array[n_1][n_2]...[n_k] := \<value>
  <li> rear~$n~\<name>~{$n_i}+			 - read array[n_1][n_2]...[n_k] to ':ARRAY_VALUE'
  <li> clar~$n~\<name>					 - clear array, all entries := 0.0

   FILEOPERATIONS:
  <li> saar~$n~\<name>					 - save array to file '\<name>.array'
  <li> loar~$n~\<name>					 - load array from file '\<name>.array'

 \section Example
   Use the array commands to realize a consecutively numbering of logfiles 
   across several runs of the programm.
\verbatim
       loar $n filenumber;			# try to load a previously stored array
       if ( :cmdstatus != "0" )
       {                            # no previous array -> the first run
       	fnr = -1;					# init the number
       	crar $n filenumber $1;      # create an array for only one component
       }
       else
       {                            # previous array is loaded
       	rear $n filenumber $0;      # put the filenumber into :ARRAY_VALUE
       	fnr = :ARRAY_VALUE;         # get this number
       }
       fnr = fnr + 1;                  # calculate the next number
       wrar $n filenumber $0 $v \@fnr;  # write this number (back) to the array
       saar $n filenumber;             # save the array (back) to file
       dear $n filenumber;             # delete array since not longer needed 
       set logname log\@fnr;

       logon \@logname;
\endverbatim
   
 \section Keywords
   values, array, manipulate, load, store, data, indexed
   
   SEE ALSO:
   'crar', 'dear', 'wrar', 'rear', 'saar', 'loar', 'clar', 'defaults'
*/
/****************************************************************************/

/****************************************************************************/
/** \page  crar crar - Create a new array structure

 \section Description
   Allocate a new array structure in the directory '/Array' and
   allocate the data field of the specified size with the function
   'CreateArray'. The data field is the same as a 'double[n_1][n_2]...[n_k]'
   definition in C would allocate. The maximum number 'k' of dimensions
   is 'AR_NVAR_MAX'. Give the 'n_i' only for the dimensions 'i' you need.

 \section Syntax
   'crar $n \<name> {$\<n_i>}+'

  <li> \<name> - name of the array structure
  <li> \<n_i>  - extension in the i.th dimension, 1 \<= i \<= 'AR_NVAR_MAX'

 \section Example
\verbatim
   # Create a 3x7 (2-dimensional) array
   crar $n example_array $3$7;
\endverbatim
   
 \section Keywords
   values, array, manipulate, load, store, data, indexed

   SEE ALSO:
   'array', 'dear', 'wrar', 'rear', 'saar', 'loar', 'clar'
*/
/****************************************************************************/

/****************************************************************************/
/** \page  dear dear - Delete an existing array structure

 \section Description
   Delete the already existing array. The entry in the directory '/Array'
   is removed and the data field of the array is freed.

 \section Syntax
   'dear $n \<name>'

  <li> \<name> - name of the array structure
   
 \section Keywords
   values, array, manipulate, load, store, data, indexed

   SEE ALSO:
   'array', 'dear', 'wrar', 'rear', 'saar', 'loar', 'clar'
*/
/****************************************************************************/

/****************************************************************************/
/** \page  saar saar - Save an array to file

 \section Description
   Store the content of the array into a file with name '\<array name>.array'.
   The 'arraypathes' entry in the 'defaults' file is considered.

 \section Syntax
   'saar $n \<name>'

  <li> \<name> - name of the array structure

   REMARK:
   The file is written in the binary mode, thus be careful when exchanging
   the computer architecture.
   
 \section Keywords
   values, array, manipulate, load, store, data, indexed

   SEE ALSO:
   'array', 'dear', 'wrar', 'rear', 'saar', 'loar', 'clar', 'defaults'
*/
/****************************************************************************/

/****************************************************************************/
/** \page  loar loar - Load and allocates an array from file

 \section Description
   Load the content of the array from the file with name '\<array name>.array'.
   The 'arraypathes' entry in the 'defaults' file is considered. A new array
   structure with the given name is allocated in the directory '/Array'.

 \section Syntax
   'loar $n \<name>'

  <li> \<name> - name of the array structure

   REMARK:
   The file is written in the binary mode, thus be careful when exchanging
   the computer architecture.
   
 \section Keywords
   values, array, manipulate, load, store, data, indexed

   SEE ALSO:
   'array', 'dear', 'wrar', 'rear', 'saar', 'loar', 'clar', 'defaults'
*/
/****************************************************************************/

/****************************************************************************/
/** \page wrar wrar - Write value into one single entry of the array

 \section Description
   Write the given double-value into the specified entry of the array.

 \section Syntax
   'wrar $n \<name> {$\<n_i>}+ $v \<value>'

  <li> \<name>  - name of the array structure
  <li> \<n_i>   - i.th coordinate of the entry, 0 \<= n_i \< allocated extension
  <li> \<value> - double value to be stored

   REMARK:
   Like in C if the array is allocated with 'n' components in a dimension,
   the valid indices for writing are 0,..,'n'-1. An index outside this
   range causes an error. Give coordinate for all allocated dimensions.

 \section Example
\verbatim
   # perform array[2][5] := 1.0
   wrar $n example_array $2$5 $v 1.0;
\endverbatim
   
 \section Keywords
   values, array, manipulate, load, store, data, indexed

   SEE ALSO:
   'array', 'dear', 'wrar', 'rear', 'saar', 'loar', 'clar', 'defaults'
*/
/****************************************************************************/

/****************************************************************************/
/** \page  rear rear - Read the value from one single entry of the array

 \section Description
   Read the the specified value from the array and store it in the
   environment variable ':ARRAY_VALUE'.

 \section Syntax
   'rear $n \<name> {$\<n_i>}+'

  <li> \<name>  - name of the array structure
  <li> \<n_i>   - i.th coordinate of the entry, 0 \<= n_i \< allocated extension

   REMARK:
   Like in C if the array is allocated with 'n' components in a dimension,
   the valid indices for reading are 0,..,'n'-1. An index outside this
   range causes an error. Give coordinate for all allocated dimensions.

 \section Example
\verbatim
   # retrieve array[2][5]
   rear $n example_array $2$5;
   # and display the value
   set :ARRAY_VALUE;
\endverbatim
   
 \section Keywords
   values, array, manipulate, load, store, data, indexed

   SEE ALSO:
   'array', 'dear', 'wrar', 'rear', 'saar', 'loar', 'clar', 'defaults'
*/
/****************************************************************************/

/****************************************************************************/
/** \page  clar clar - Set all entries of the array to 0.0

 \section Description
   Set all entries of the data field contained in the array structure to 0.0.

 \section Syntax
   'clar $n \<name>'

  <li> \<name> - name of the array structure
   
 \section Keywords
   values, array, manipulate, load, store, data, indexed

   SEE ALSO:
   'array', 'dear', 'wrar', 'rear', 'saar', 'loar', 'clar', 'defaults'
*/
/****************************************************************************/

/****************************************************************************/
/** \page  dumpalg dumpalg - Dumps the surface algebra to the interface

 \section Description
   Dumps the surface algebra

 \section Syntax
   'dumpalg \<name\>'

  <li> \<name\> - file name
   
 \section Keywords
   data, io

*/
/****************************************************************************/