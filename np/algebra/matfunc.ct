/****************************************************************************/
/*																			*/
/* File:	  matfunc.ct													*/
/*																			*/
/* Purpose:   matrix function template        								*/
/*																			*/
/* Author:	  Klaus Birken           										*/
/*			  Institut fuer Computeranwendungen III 						*/
/*			  Universitaet Stuttgart										*/
/*			  Pfaffenwaldring 27											*/
/*			  70569 Stuttgart												*/
/*																			*/
/* History:   Aug 25 97 begin                      							*/
/*																			*/
/* Remarks: 																*/
/*																			*/
/****************************************************************************/


#ifdef T_USE_MATMUL

#define T_MOD_11	   MATMUL_11(s,mat,m,w,cy)
#define T_MOD_12	   MATMUL_12(s,mat,m,w,cy)
#define T_MOD_13	   MATMUL_13(s,mat,m,w,cy)
#define T_MOD_21	   MATMUL_21(s,mat,m,w,cy)
#define T_MOD_22	   MATMUL_22(s,mat,m,w,cy)
#define T_MOD_23	   MATMUL_23(s,mat,m,w,cy)
#define T_MOD_31	   MATMUL_31(s,mat,m,w,cy)
#define T_MOD_32	   MATMUL_32(s,mat,m,w,cy)
#define T_MOD_33	   MATMUL_33(s,mat,m,w,cy)

#define T_MOD_SUCC_11  MATMUL_11_SUCC(s,mat,m,w,cy)
#define T_MOD_SUCC_12  MATMUL_12_SUCC(s,mat,m,w,cy)
#define T_MOD_SUCC_13  MATMUL_13_SUCC(s,mat,m,w,cy)
#define T_MOD_SUCC_21  MATMUL_21_SUCC(s,mat,m,w,cy)
#define T_MOD_SUCC_22  MATMUL_22_SUCC(s,mat,m,w,cy)
#define T_MOD_SUCC_23  MATMUL_23_SUCC(s,mat,m,w,cy)
#define T_MOD_SUCC_31  MATMUL_31_SUCC(s,mat,m,w,cy)
#define T_MOD_SUCC_32  MATMUL_32_SUCC(s,mat,m,w,cy)
#define T_MOD_SUCC_33  MATMUL_33_SUCC(s,mat,m,w,cy)

#endif


INT T_FUNCNAME (MULTIGRID *mg, INT fl, INT tl, INT mode T_ARGS)
{
#ifdef _SPARSE_
	T_SPARSE_CALL
#else
	VECTOR *v;
	MATRIX *mat;
	INT lev,rtype,ctype,nr,nc,i;
	#ifdef T_USE_Y
	VECTOR *w;
	DOUBLE *mptr,*vptr;
	#endif

	#ifdef T_CONFIG
	T_CONFIG;
	#endif

	#ifdef Debug
	if (trace_ugblas)
	{
		PrintDebug("-blas2-%s: fl=%2d tl=%2d mode=%c",STR(T_FUNCNAME),fl,tl,(mode==ALL_VECTORS)?'a':'s');
		#ifdef T_PR_DBG
			PrintDebug T_PR_DBG;
		#endif
		PrintDebug("\n");
	}
	ASSERT(fl<=tl);
	ASSERT((mode != ON_SURFACE) || (fl <= FULLREFINELEVEL(mg)));
	#if defined T_USE_X && defined T_USE_Y
	ASSERT(VDequal(x,y)==NO);	/* if x==y, the results will be wrong! */
	#endif
	#ifdef T_CONS_CHECK
	T_CONS_CHECK;
	#endif
	#endif

	if (mode == ON_SURFACE) {
		#define T_SURFACE_MODE
		#include "matmode.ct"
		#undef T_SURFACE_MODE
	}
	else {
		#include "matmode.ct"
	}
	#ifdef ModelP 
	#ifdef T_POST_PAR
	T_POST_PAR;
    #endif
    #endif
	#ifdef T_POST
	T_POST;
    #endif
#endif

	return(NUM_OK);
}

#undef T_SPARSE_CALL

#if defined(T_MOD_SCAL) && !defined(T_NO_BV_FUNC) && defined __BLOCK_VECTOR_DESC__ 

#ifdef T_ARGS
	#ifndef T_ARGS_BV
		#define T_ARGS_BV T_ARGS
	#endif
#endif

#ifdef T_CONFIG
	#ifndef T_CONFIG_BV
		#define T_CONFIG_BV T_CONFIG
	#endif
#endif

INT CAT(T_FUNCNAME,BS) (const BLOCKVECTOR *bv_row, const BV_DESC *bvd_col, const BV_DESC_FORMAT *bvdf T_ARGS_BV)
{
	VECTOR *v, *end_v;
	MATRIX *mat;

	#ifdef T_USE_Y
	VECTOR *w;	
	#endif
	
	#ifdef T_CONFIG_BV
	T_CONFIG_BV;
	#endif

	#ifdef Debug
	ASSERT(mc>=0);
	#ifdef T_USE_X
	ASSERT(xc>=0);
	#endif
	#ifdef T_USE_Y
	ASSERT(yc>=0);
	#endif
	#if defined T_USE_X && defined T_USE_Y
	if(xc==yc)
	{
		ASSERT(!VMATCH(BVFIRSTVECTOR(bv_row),bvd_col,bvdf));	/* if xc==yc (in the same BLOCKVECTOR), the results will be wrong! */
	}
	#endif
	#ifdef T_CONS_CHECK
	T_CONS_CHECK;
	#endif
	#endif

	if( BV_IS_EMPTY(bv_row) )	return(NUM_OK);

	end_v=BVENDVECTOR(bv_row);
	for (v=BVFIRSTVECTOR(bv_row); v!=end_v; v=SUCCVC(v)) 
	{
		#ifdef T_LOOP_SCAL
		T_LOOP_SCAL 
		#endif
		for (mat=VSTART(v); mat!=NULL; mat=MNEXT(mat))
		{       
			#ifdef T_USE_Y
				w = MDEST(mat);
				if ( VMATCH(w, bvd_col, bvdf) )
			#else
				if ( VMATCH(MDEST(mat), bvd_col, bvdf) )
			#endif
			{
				T_MOD_SCAL
			}
		}       
		#ifdef T_POST_SCAL
		T_POST_SCAL
		#endif
	}       
	
	#ifdef T_POST
	T_POST;
    #endif
	return(NUM_OK);
}
#endif

#undef T_FUNCNAME 
#undef T_ARGS 
#undef T_PR_DBG
#undef T_ARGS_BV 
#undef T_USE_X
#undef T_USE_Y
#undef T_CONFIG
#undef T_CONFIG_BV
#undef T_CONS_CHECK 
#undef T_PREP_SCAL
#undef T_LOOP_SCAL
#undef T_MOD_SCAL
#undef T_POST_SCAL
#undef T_CLEAR_X
#undef T_PREP_SWITCH
#undef T_PREP_11
#undef T_LOOP_11
#undef T_MOD_11 
#undef T_MOD_SUCC_11 
#undef T_POST_11
#undef T_PREP_12
#undef T_LOOP_12
#undef T_MOD_12 
#undef T_MOD_SUCC_12 
#undef T_POST_12
#undef T_PREP_13
#undef T_LOOP_13
#undef T_MOD_13 
#undef T_MOD_SUCC_13 
#undef T_POST_13
#undef T_PREP_21
#undef T_LOOP_21
#undef T_MOD_21 
#undef T_MOD_SUCC_21 
#undef T_POST_21
#undef T_PREP_22
#undef T_LOOP_22
#undef T_MOD_22
#undef T_MOD_SUCC_22 
#undef T_POST_22
#undef T_PREP_23
#undef T_LOOP_23
#undef T_MOD_23
#undef T_MOD_SUCC_23 
#undef T_POST_23
#undef T_PREP_31
#undef T_LOOP_31
#undef T_MOD_31 
#undef T_MOD_SUCC_31 
#undef T_POST_31
#undef T_PREP_32
#undef T_LOOP_32
#undef T_MOD_32
#undef T_MOD_SUCC_32 
#undef T_POST_32
#undef T_PREP_33
#undef T_LOOP_33
#undef T_MOD_33
#undef T_MOD_SUCC_33
#undef T_POST_33
#undef T_PREP_N
#undef T_MOD_N
#undef T_POST_N
#undef T_POST_PAR
#undef T_POST
