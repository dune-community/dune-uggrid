/****************************************************************************/
/*                                                                          */
/* File:      vecfunc.ct                                                    */
/*                                                                          */
/* Purpose:   vector function template                                      */
/*                                                                          */
/* Author:    Klaus Birken           										*/
/*            Institut fuer Computeranwendungen III 						*/
/*            Universitaet Stuttgart										*/
/*            Pfaffenwaldring 27											*/
/*            70569 Stuttgart                                               */
/*                                                                          */
/* History:   Aug 22 97 begin                      							*/
/*                                                                          */
/* Remarks:                                                                 */
/*                                                                          */
/****************************************************************************/


INT T_FUNCNAME (MULTIGRID *mg, INT fl, INT tl, INT mode, const VECDATA_DESC *x T_ARGS)
{
	register VECTOR *v;
	INT lev,vtype,ncomp,i;
	DEFINE_VD_CMPS(cx);
	#ifdef T_USE_Y
	DEFINE_VD_CMPS(cy);
	#endif

	#ifdef T_CONFIG
	T_CONFIG;
	#endif
	
	#ifdef Debug
	if (trace_ugblas>=TRBL_PARAMS)
	{
		PrintDebug("-blas1-%s: fl=%2d tl=%2d mode=%c x=%s",STR(T_FUNCNAME),fl,tl,(mode==ALL_VECTORS)?'a':'s',ENVITEM_NAME(x));
		#ifdef T_PR_DBG
			PrintDebug T_PR_DBG;
		#endif
		PrintDebug("\n");
		#ifdef T_PR_IN
		if (trace_ugblas>=TRBL_VECS)
			T_PR_IN
		#endif
	}
	ASSERT(fl<=tl);
	ASSERT((mode != ON_SURFACE) || (fl <= FULLREFINELEVEL(mg)));
	#ifdef T_CONS_CHECK
	T_CONS_CHECK;
	#endif
	#endif

	if (mode == ON_SURFACE) {
		#define T_SURFACE_MODE
		#include "vecmode.ct"
		#undef T_SURFACE_MODE
	}
	else {
		#include "vecmode.ct"
	}
	#ifdef ModelP 
	#ifdef T_POST_PAR
	T_POST_PAR;
    #endif
    #endif
	#ifdef T_POST
	T_POST;
    #endif
	
	#ifdef T_PR_OUT
	if (trace_ugblas>=TRBL_VECS)
	{
		PrintDebug("\nresult:\n");
		T_PR_OUT
	}
	#endif
	
	return(NUM_OK);
}

#if defined(T_MOD_SCAL) && !defined(T_NO_BV_FUNC)

#ifdef T_ARGS
	#ifndef T_ARGS_BV
		#define T_ARGS_BV T_ARGS
	#endif
#endif

INT CAT(T_FUNCNAME,BS) (const BLOCKVECTOR *bv, INT xc T_ARGS_BV)
{
	register VECTOR *v, *end_v;
	#ifdef T_CONFIG
	T_CONFIG;
	#endif

	#ifdef Debug
	ASSERT(xc>=0);
	#ifdef T_USE_Y
		ASSERT(yc>=0);
	#endif
	#ifdef T_CONS_CHECK_BV
		T_CONS_CHECK_BV;
	#endif
	#endif

	if( BV_IS_EMPTY(bv) )	return(NUM_OK);
	
	end_v = BVENDVECTOR( bv );
	for (v=BVFIRSTVECTOR(bv); v!= end_v; v=SUCCVC(v))
	{
        #ifdef T_PREP_SCAL
	    T_PREP_SCAL
		#endif
		T_MOD_SCAL;
	}
	#ifdef T_POST
	T_POST;
    #endif
	return(NUM_OK);
}

#endif

#undef T_FUNCNAME 
#undef T_ARGS 
#undef T_PR_DBG
#undef T_PR_IN
#undef T_PR_OUT
#undef T_ARGS_BV
#undef T_USE_Y
#undef T_CONFIG
#undef T_CONS_CHECK 
#undef T_CONS_CHECK_BV 
#undef T_PREP_SCAL
#undef T_MOD_SCAL
#undef T_PREP_SWITCH
#undef T_PREP_1
#undef T_MOD_VECTOR_1 
#undef T_PREP_2
#undef T_MOD_VECTOR_2
#undef T_PREP_3
#undef T_MOD_VECTOR_3
#undef T_PREP_N
#undef T_MOD_VECTOR_N
#undef T_POST_PAR
#undef T_POST
#undef T_NO_BV_FUNC
